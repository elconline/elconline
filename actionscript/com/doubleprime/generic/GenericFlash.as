 /**  * added addtofavorites & addtofavoritesurl  */ package com.doubleprime.generic {		import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.display.LoaderInfo;	import flash.display.Sprite;	import flash.external.ExternalInterface;	import flash.net.LocalConnection;	import flash.net.URLRequest;	import flash.net.navigateToURL;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;		public class GenericFlash extends Sprite{		// useLocal to true to be able to publish locally 	public static var useLocal : Boolean = false;	public static var defaultElcDom : String = "http://dev.common.esteeonline.com"; 	public static var defaultSiteDom : String = "http://dev.common.esteeonline.com";	public static var defaultMoviePath : String = "/flash";	public static var defaultSection : String = "";	public static var defaultCartBase : String = "";	public static var defaultFavoriteBase : String = "";	private static var _instance:GenericFlash = null;	public var elcDom:String;	public var siteDom:String;	public var moviePath:String;	public var section:String;	public var cartBase: String;	public var favoriteBase:String;		public function GenericFlash(path:DisplayObject) {		var paramObj:Object = LoaderInfo(path.loaderInfo).parameters;	    if (useLocal) {	    	elcDom = './';	    }	    else {			elcDom =  paramObj["elcDom"] || defaultElcDom;	    }		siteDom = paramObj["siteDom"] || defaultSiteDom;		moviePath = paramObj["moviePath"] || defaultMoviePath;		section = paramObj["section"] || defaultSection;		cartBase = paramObj["cartBase"] || defaultCartBase;		favoriteBase = paramObj["favoriteBase"] || defaultFavoriteBase;				// Debugging flashvars sent from the flash.js ///		var tf:TextField = new TextField();		tf.autoSize = TextFieldAutoSize.LEFT;		tf.border = true;		addChild(tf);		tf.appendText("params:" + "\n");				var keyStr:String;		var valueStr:String;		   	    for (keyStr in paramObj) {	        valueStr = String(paramObj[keyStr]);	        tf.appendText("\t" + keyStr + ":\t" + valueStr + "\n");  	    }		// end Debugging   ///		if (siteDom == '') {			var lc:LocalConnection = new LocalConnection();			var domain:String = lc.domain;			elcDom = siteDom = ( domain == 'localhost' ? '' : domain );		}	}		public static function getInstance(path:DisplayObject):GenericFlash {		if (GenericFlash._instance == null) {			GenericFlash._instance = new GenericFlash(path);		}		return GenericFlash._instance;	}		public function resourceurl(url:String):String {		if (url.indexOf('/') == 0) {			return this.elcDom + url;		}		else {			return this.elcDom + this.moviePath + '/' + url;		}	}		public function pageurl(url:String):String {		if (url.indexOf('/') == 0) {			return this.siteDom + url;		}		else {			return this.siteDom + this.moviePath + '/' + url;		}	}		public function gotourl(url:String):void {		// For local testing so we can see the request.		// (useLocal won't ever be true on any estee server, only for local publish)		if (useLocal) {			navigateToURL( new URLRequest(url) );		}		else {			ExternalInterface.call('GenericFlash.gotourl',url);		}	}		public function gotoanchor(anchor:String):void {		ExternalInterface.call('GenericFlash.gotoanchor',anchor);	}		public function setsection(section:String):void {		this.gotoanchor('section='+section);	}				public function downloadurl(url:String):void {		ExternalInterface.call('GenericFlash.downloadurl',url);	} 		public function popup(url:String, args:Object):void {		ExternalInterface.call('GenericFlash.popup', url, args);	} 		public function cmCreatePageviewTag(pageID:String, searchString:String, categoryID:String, searchResults:Number):void {		ExternalInterface.call('GenericFlash.cmCreatePageviewTag',pageID,searchString,categoryID,searchResults);	}		public function cmCreateManualLinkClickTag(href:String, thename:String, pageID:String):void {		ExternalInterface.call('GenericFlash.cmCreateManualLinkClickTag',href,thename,pageID);	}		public function cmCreateProductviewTag(productID:String, productName:String, categoryID:String):void {		ExternalInterface.call('GenericFlash.cmCreateProductviewTag',productID,productName,categoryID);	}		public function cmCreateConversionEventTag(eventID: String, actionType: Number, categoryID: String, points: Number):void {		ExternalInterface.call('GenericFlash.cmCreateConversionEventTag',eventID,actionType,categoryID,points);	}	public function cmCreatePageElementTag(elementCategory:String,elementID:String):void {		ExternalInterface.call('GenericFlash.cmCreatePageElementTag',elementCategory,elementID);	}		public function urchinTracker(path: String):void {		ExternalInterface.call('GenericFlash.urchinTracker',path);	}		public function jsCall(method: String, args: Array):Object {		return ExternalInterface.call('GenericFlash.jsCall', method, args);	}		public function addtocarturl(args:Array, returnurl:String):String {		//var stuff:Array = [{skuid:1234,ssid:2345,qty:1},{skuid:345}];				var bits:Array = new Array();		for (var i:String in args) {			var s:Object = args[i];			if (s.ssid) {				bits.push('qty%2D'+s.ssid+'%7E'+s.skuid+'='+s.qty);			}			else {				bits.push('qty%2D'+s.skuid+'='+s.qty);							}		}		if (returnurl) {			bits.push('returnurl='+escape(returnurl)); 		}		var url:String = this.addURLargs(this.cartBase, bits.join('&'));		return this.pageurl(url);	}	public function addtofavoritesurl(args:Array, returnurl:String=""):String {		var bits:Array = new Array();		for (var i:String in args) {			var s:Object = args[i];			if (s.ssid) {				bits.push('fav%2Dadd%2D'+s.ssid+'%23'+s.skuid+'='+s.qty);			}			else {				bits.push('fav%2Dadd%2D'+s.skuid+'='+s.qty);							}		}		if (returnurl) {			bits.push('returnurl='+escape(returnurl)); 		}		var url:String = this.addURLargs(this.favoriteBase, bits.join('&'));//'/altercart/templates/user/favourites.tmpl' 		return this.pageurl(url);	}		public function addtocart(args:Array, returnurl:String=""):void {		this.gotourl(this.addtocarturl(args,returnurl));	}	public function addtofavorites(args:Array, returnurl:String=""):void {		this.gotourl(this.addtofavoritesurl(args,returnurl));	}	public function addURLargs(part1:String, part2:String):String {		if (part1.indexOf('?') == -1) {			return part1 + '?' + part2;		}		else {			return part1 + '&' + part2;		}	}}}