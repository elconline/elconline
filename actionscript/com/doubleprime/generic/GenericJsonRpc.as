package com.doubleprime.generic {	import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.events.*;	import flash.net.URLRequest ;	import flash.net.URLVariables ;	import flash.net.URLLoader ;	import flash.net.URLRequestMethod;    import flash.utils.Timer;	import com.adobe.serialization.json.JSON;	import com.doubleprime.generic.GenericFlash;	/**	 * @author nmouzannar	 */	public class GenericJsonRpc extends Sprite{				private var loader:URLLoader;		private var request:URLRequest;		private var variables:URLVariables;		private var _response:Object;		private var _jsonrpc_ID:Number = 1;		private var _url:String;		private var secondTimer:Timer; 		public static const COMPLETE:String = "COMPLETE";		public static const OPENHANDLER:String = "OPENHANDLER";		public static const PROGRESSHANDLER:String = "PROGRESSHANDLER";		public static const IOERROR:String = "IOERROR";		public static const TIMERTICK:String = "TIMERTICK";		public static const TIMERUP:String = "TIMERUP";		private var f:GenericFlash;			public function GenericJsonRpc(t:DisplayObject){			f = GenericFlash.getInstance(t); // generic Flash		}				public function doMethod(method:String, args:Object):void {			variables = new URLVariables();        	variables.JSONRPC = JSON.encode([{id:_jsonrpc_ID, method:method, params:args}]);			_url = 'http://eng.esteelauder.com/jsonrpc.logic';//'http://dev.aveda.com/jsonrpc.json';//f.pageurl("/jsonrpc.json"); //"http://dev.clinique.com/jsonrpc.json"			request = new URLRequest();				request.url = _url;        	request.data = variables;			request.method = URLRequestMethod.POST;								loader = new URLLoader();			configureListeners(loader);			loader.load(request);    						}		private function configureListeners(dispatcher:IEventDispatcher):void {            dispatcher.addEventListener(Event.COMPLETE, completeHandler,false,0,true);            dispatcher.addEventListener(Event.OPEN, openHandler,false,0,true);            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler,false,0,true);            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler,false,0,true);            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler,false,0,true);            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler,false,0,true);        }        public function getResponse():Object {			return _response;//returned data query method...		}	        private function progressHandler(event:ProgressEvent):void {             dispatchEvent(new Event(GenericJsonRpc.PROGRESSHANDLER));             stopTimer();        }        private function securityErrorHandler(event:SecurityErrorEvent):void {        	stopTimer();        }                private function ioErrorHandler(event:IOErrorEvent):void {             dispatchEvent(new Event(GenericJsonRpc.IOERROR));             stopTimer();        }		private function openHandler(event:Event):void {            dispatchEvent(new Event(GenericJsonRpc.OPENHANDLER));            ShortTimer();        }        private function httpStatusHandler(event:HTTPStatusEvent):void {}                private function completeHandler(event:Event):void {            var loader:URLLoader = URLLoader(event.target);						var jsonresponse:Object = JSON.decode(loader.data);            _response = jsonresponse[0].result;            stopTimer();           dispatchEvent(new Event(GenericJsonRpc.COMPLETE));        }			public function ShortTimer():void {	        secondTimer = new Timer(1000, 40);		// creates a new 20-second Timer	        secondTimer.addEventListener(TimerEvent.TIMER, onTick);	        secondTimer.addEventListener(TimerEvent.TIMER_COMPLETE, onTimerComplete);	        secondTimer.start();    // starts the timer ticking        }        public function stopTimer():void{        	secondTimer.stop();        }         public function onTick(event:TimerEvent):void {            dispatchEvent(new Event(GenericJsonRpc.TIMERTICK));        }        public function onTimerComplete(event:TimerEvent):void {            dispatchEvent(new Event(GenericJsonRpc.TIMERUP));        }	}}