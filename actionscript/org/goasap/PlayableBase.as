/** * Copyright (c) 2007 Moses Gunesch *  * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. */package org.goasap {	import flash.events.EventDispatcher;	import flash.utils.Dictionary;	import flash.utils.getQualifiedClassName;		import org.goasap.errors.InstanceNotAllowedError;		/**	 * Optional top-level abstract base class for classes that implement the 	 * IPlayable interface.	 * 	 * <p> <font color="#CC0000">[This section updated recently!]</font><br>	 * PlayableBase extentes EventDispatcher and provides three general-purpose	 * properties: 	 * <ol>	 * <li>A <code>state</code> getter, found in the IPlayable interface.</li>	 * 	 * <li>A unique numerical <code>playableID</code> value for each instance.	 * This property is a GoASAP convention that is not required by playable instances	 * but is used in utility functions like PlayableGroup.getChildByID().</li>	 * 	 * <li>A static <code>_playRetainer</code> property that can by used to store	 * instances temporarily during play. This convention should be used with any	 * playable item that does not add itself to GoEngine (a Sequence instance for	 * example), to prevent garbage collection during play.</li>	 * </ol></p>	 * 	 * <hr/>	 * 	 * <p><i>Note:</i> GoASAP's IPlayable structure was simplified at version 0.5.0 	 * and now differs slightly from the information found in the Friends of Ed book, 	 * <a href="http://www.friendsofed.com/book.html?isbn=1430209933" target="_blank">"The 	 * Essential Guide to Open Source Flash Development"</a>. Please regard the 	 * following changes:	 * <ol>	 * <li>The IPlayableBase interface has been removed from the GoASAP core. The 	 * <code>state</code> property was moved into the IPlayable interface, and the 	 * <code>playableID</code> property is now treated as an optional convention.</li>	 * <li>The play-state constants (<code>PLAYING</code>, etc.) have been moved into	 * a new class called <a href="PlayStates.html">PlayStates</a>.</li>	 * <li>This class, PlayableBase, is now treated as entirely optional.</li>	 * </ol></p>	 * 	 * @see org.goasap.interfaces.IPlayable IPlayable	 * @see org.goasap.PlayStates PlayStates	 * 	 * @author Moses Gunesch	 */	public class PlayableBase extends EventDispatcher {				// -== Public Properties ==-				/**		 * An arbitrary id value for the convenient identification of any		 * instance, automatically set to an instance count by this class.		 */		public function get playableID() : * {			return _id;		}		public function set playableID(value: *):void {			_id = value;		}		/**		 * Returns a PlayStates constant.		 * 		 * @see PlayStates#STOPPED		 * @see PlayStates#PAUSED		 * @see PlayStates#PLAYING_DELAY		 * @see PlayStates#PLAYING		 */		public function get state() : String {			return _state;		}		// -== Protected Properties ==-				/**		 * @private		 */		private static var _idCounter	: int = -1;		/**		 * @private		 */		protected var _state : String = PlayStates.STOPPED;		/**		 * @private		 */		protected var _id : *;		/**		 * Memory-management: playable items that do not add themselves to GoEngine should		 * use this property to store references to themselves during play.		 * 		 * <p>This prevents instance from getting garbage-collected during play. For an example, 		 * see SequenceBase's start and stop methods. This step is not necessary if GoEngine.addItem() 		 * is used by the item, since in that case GoEngine keeps a live reference during play.</p>		 * 		 * <p>This property is a convenience. You can mimic the technique using any static property, 		 * to temporarily protect the object from garbage collection.</p>		 * 		 * @see org.goasap.utils.SequenceBase SequenceBase		 */		protected static var _playRetainer : Dictionary = new Dictionary(false);						// -== Public Methods ==-				/**		 * Throws an InstanceNotAllowedError if directly instantiated, also sets a		 * default playableID to an instance count number.		 */		public function PlayableBase() : void {			var className:String = getQualifiedClassName(this);			if (className.slice(className.lastIndexOf("::")+2) == "PlayableBase") {				throw new InstanceNotAllowedError("PlayableBase");			}			playableID = ++ _idCounter;		}		/**		 * Appends the regular toString value with the instance's playableID.		 * 		 * @return	String representation of this instance.		 */		override public function toString():String {			var s:String = super.toString();			var addLast:Boolean = (s.charAt(s.length-1)=="]");			if (addLast) s = s.slice(0,-1);			if (playableID is String) s += " playableID:\"" + playableID + "\"";			else s += " playableID:" + playableID;			if (addLast) s += "]";			return s;		}	}}