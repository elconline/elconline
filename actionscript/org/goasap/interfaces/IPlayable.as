/** * Copyright (c) 2007 Moses Gunesch *  * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. */package org.goasap.interfaces {	import flash.events.IEventDispatcher;			/**	 * Defines a standard set of play controls and a play-state property.	 * 	 * <p>This interface extends IEventDispatcher since playable items typically	 * dispatch GoEvents, and combining the interfaces allows utilities to assume	 * that they can use <code>addEventListener()</code> on IPlayable items.</p>	 * 	 * <hr/>	 * 	 * <p><i>Note:</i> GoASAP's IPlayable structure was simplified at version 0.5.0 	 * and now differs slightly from the information found in the Friends of Ed book, 	 * <a href="http://www.friendsofed.com/book.html?isbn=1430209933" target="_blank">"The 	 * Essential Guide to Open Source Flash Development"</a>. Please regard the 	 * following changes:	 * <ol>	 * 	 * <li>The IPlayableBase interface has been removed from the GoASAP core. The 	 * <code>state</code> property was moved into the IPlayable interface, and the 	 * <code>playableID</code> property is now treated as an optional convention.</li>	 * <li>The play-state constants (<code>PLAYING</code>, etc.) have been moved into	 * a new class called <a href="../PlayStates.html">PlayStates</a>.</li>	 * <li>The class PlayableBase is now treated as entirely optional.</li>	 * </ol></p>	 * 	 * @see org.goasap.PlayableBase PlayableBase	 * @see org.goasap.PlayStates PlayStates	 * 	 * @author Moses Gunesch	 */	public interface IPlayable extends IEventDispatcher 	{		/**		 * Normally this should return a PlayStates constant.		 */		function get state () : String;				/**		 * Start playing.		 */		function start () : Boolean;				/**		 * Stop playing.		 */		function stop () : Boolean;				/**		 * Pause play.		 */		function pause () : Boolean;				/**		 * Resume paused play.		 */		function resume () : Boolean;				/**		 * @param position	Index indicating point in animation to skipTo.		 * 					(Remember that you can rename paramters when		 * 					implementing an interface in AS3, for example		 * 					"seconds" or "index" instead of "position.")		 */		function skipTo (position : Number) : Boolean;	}}