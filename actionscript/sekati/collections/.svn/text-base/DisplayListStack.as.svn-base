/** * sekati.collections.DisplayListStack * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.collections {	import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.display.Sprite;		import sekati.collections.DisplayListCollection;	import sekati.collections.IStack;	import sekati.collections.StackIterator;		/**	 * DisplayList base Stack data structure.	 */	public class DisplayListStack extends DisplayListCollection implements IStack {		/**		 * DisplayListStack Constructor creates a new <code>DisplayListStack</code>.		 * You may have it wrap an existing <code>DisplayObjectContainer</code> 		 * or the constructor will create an empty <code>Sprite</code> for you.		 */		public function DisplayListStack(container : DisplayObjectContainer = null) {			if ( !container ) container = new Sprite( );			super( container );		}		/**		 * @inheritDoc		 */		public function get top() : Object {			return container.getChildAt( container.numChildren - 1 );		}		/**		 * @inheritDoc		 */		public function push(o : Object) : void {			if ( !(o is DisplayObject ) ) throw new ArgumentError( "Require an object of type DisplayObject." );			container.addChild( o as DisplayObject );					}		/**		 * @inheritDoc		 */		public function pop() : Object {			return container.removeChildAt( container.numChildren - 1 );		}		/**		 * @inheritDoc		 */		override public function getIterator() : IIterator {			return new StackIterator( this );				}	}}