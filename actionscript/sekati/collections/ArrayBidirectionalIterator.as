/** * sekati.collections.ArrayBidirectionalIterator * @version 1.0.5 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.collections {	import sekati.collections.IBidirectionalIterator;	import sekati.collections.IPointerIterator;		/**	 * ArrayBidirectionalIterator provides a non-destructive, pointer-based, Bi-Directional Array Iterator.	 */	public class ArrayBidirectionalIterator implements IBidirectionalIterator, IPointerIterator {		protected var _array : Array;		protected var _pointer : int;		/**		 * ArrayBidirectionalIterator Constructor		 */		public function ArrayBidirectionalIterator(array : Array) {			_array = array.concat( );			reset( );		}		/**		 * Returns the previous element, or <code>null</code> if none.		 */		public function previous() : Object {			return hasPrevious( ) ? _array[_pointer--] : null;		}		/**		 * Returns the next element, or <code>null</code> if none.		 */		public function next() : Object {			return hasNext( ) ? _array[_pointer++] : null;		}				/**		 * Return the current element		 */		public function current() : Object {			return _array[_pointer];		}		/**		 * Reset iterative pointer index.		 */		public function reset() : void {			_pointer = 0;		}		/**		 * Check if iterator has a previous element.		 */		public function hasPrevious() : Boolean {			return (_pointer > -1);		}			/**		 * Check if iterator has a next element.		 */		public function hasNext() : Boolean {			return (_pointer < _array.length);		}		/**		 * Return a <code>glimple</code> of the previous element without 		 * directionally iterating the pointer backwards, or return		 * <code>null</code> if none.		 */		public function glimpse() : Object {			return (_pointer - 1 >= 0 ) ? _array[_pointer - 1] : null;		}					/**		 * Return a <code>peek</code> of the next element without 		 * directionally iterating the pointer forwards, or return		 * <code>null</code> if none.		 */		public function peek() : Object {			return (_pointer + 1 <= _array.length ) ? _array[_pointer + 1] : null;		}		/**		 * Return the collection length.		 */		public function get length() : int {			return _array.length;		}		/**		 * The interative pointer index.		 */		public function get pointer() : int {			return _pointer;		}		/**		 * @private		 */		public function set pointer(i : int) : void {			_pointer = i;		}				}}