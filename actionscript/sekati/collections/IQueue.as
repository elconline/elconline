/** * sekati.collections.IQueue * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.collections {	import sekati.collections.ICollection;	/**	 * IQueue defines the queue data structure.  A queue is a special collection type in which elements	 * are added to one end, and removed from the other end. You add elements via <code>enqueue</code>, 	 * and remove them via <code>dequeue</code>.	 */	public interface IQueue extends ICollection {		/**		 * The next object in queue, would be return and removed on a subsequent call to dequeue.		 */		function get head() : Object;		/**		 * Add an object to end of the queue.		 */		function enqueue( o : Object ) : void;		/**		 * Remove and returns the next object in the queue.		 */		function dequeue() : Object;		}}