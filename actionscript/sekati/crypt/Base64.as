/** * sekati.crypt.Base64 * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2008 jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php *  * Original Javascript implementation: http://www.aardwulf.com/tutor/base64/base64.html */package sekati.crypt {	import sekati.crypt.ICipher;		/**	 * Encodes and decodes a base64 string.	 * @see http://en.wikipedia.org/wiki/Base64	 */	final public class Base64 implements ICipher {		private static const BASE64_CHARS : String = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";		/**		 * Encodes a base64 string.		 * @param src (String) - string to encode		 * @return String		 */		public static function encode(src : String) : String {			var i : int = 0;			var output : String = new String( "" );			var chr1 : Number, chr2 : Number, chr3 : Number;			var enc1 : Number, enc2 : Number, enc3 : Number, enc4 : Number;			while (i < src.length) {				chr1 = src.charCodeAt( i++ );				chr2 = src.charCodeAt( i++ );				chr3 = src.charCodeAt( i++ );				enc1 = chr1 >> 2;				enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);				enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);				enc4 = chr3 & 63;				if(isNaN( chr2 )) enc3 = enc4 = 64;				else if(isNaN( chr3 )) enc4 = 64;				output += BASE64_CHARS.charAt( enc1 ) + BASE64_CHARS.charAt( enc2 );				output += BASE64_CHARS.charAt( enc3 ) + BASE64_CHARS.charAt( enc4 );			}			return output;		}		/**		 * Decodes a base64 string		 * @param src (String) - string to decode		 * @return String		 */		public static function decode(src : String) : String {			var i : int = 0;			var output : String = new String( "" );			var chr1 : Number, chr2 : Number, chr3 : Number;			var enc1 : Number, enc2 : Number, enc3 : Number, enc4 : Number;			while (i < src.length) {				enc1 = BASE64_CHARS.indexOf( src.charAt( i++ ) );				enc2 = BASE64_CHARS.indexOf( src.charAt( i++ ) );				enc3 = BASE64_CHARS.indexOf( src.charAt( i++ ) );				enc4 = BASE64_CHARS.indexOf( src.charAt( i++ ) );				chr1 = (enc1 << 2) | (enc2 >> 4);				chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);				chr3 = ((enc3 & 3) << 6) | enc4;				output += String.fromCharCode( chr1 );				if (enc3 != 64) output = output + String.fromCharCode( chr2 );				if (enc4 != 64) output = output + String.fromCharCode( chr3 );			}			return output;		}				/**		 * Base64 Static Constructor		 */		public function Base64() {			throw new Error( "Base64 is a static class and cannot be instantiated." );		}			}}