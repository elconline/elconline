/** * sekati.display.StageDisplay * @version 1.1.2 * @author jason m horwitz | sekati.com * Copyright (C) 2008 jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.display {	import flash.display.DisplayObject;	import flash.display.Stage;	import flash.display.StageDisplayState;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.utils.clearInterval;	import flash.utils.setInterval;	import sekati.display.Canvas;	import sekati.events.StageEvent;	import sekati.log.Logger;		/**	 * StageDisplay provides an interface to the swf application Stage 	 * instance allowing display and non-displayObjects to interact with 	 * and control the stage.	 * 	 * <p><b>Note</b>: Fullscreen requires <em>Flash Player >= 9.0.28</em>.</p>	 * 	 * @see sekati.display.Canvas	 * @see http://livedocs.adobe.com/flash/9.0/ActionScriptLangRefV3/flash/display/Stage.html	 */		public class StageDisplay extends EventDispatcher {			protected static var _instance : StageDisplay;		protected static var _resizeIntervalId : Number;		protected static var _leaveIntervalId : Number;		protected var _leavePoint : Point;			/**		 * Stored reference to <code>Canvas.stage</code>.		 */		protected static const STAGE : Stage = Canvas.stage;		/**		 * Stored reference to <code>Canvas.root</code>.		 */		protected static const ROOT : DisplayObject = Canvas.root;		/**		 * Milisecond delay after <code>RESIZE</code> event to fire <code>RESIZE_COMPLETE</code>.		 */		protected static const RESIZE_COMPLETE_DELAY_MS : Number = 500;		/**		 * Milisecond delay after <code>LEAVE</code> event to fire <code>LEAVE_COMPLETE</code>.		 */		protected static const LEAVE_COMPLETE_DELAY_MS : Number = 500;		/**		 * StageDisplay Singleton Constructor		 * @param $ SingletonEnforcer internal to the AS file; this param prevents external instantiation without error.		 */		public function StageDisplay($ : SingletonEnforcer = null) {			if (!$) {				throw new ArgumentError( "sekati.display.StageDisplay is a Singleton and may only be accessed via its accessor methods: 'getInstance()' or '$'." );			}			STAGE.addEventListener( Event.FULLSCREEN, fullscreenHandler );			STAGE.addEventListener( Event.RESIZE, resizeHandler );			STAGE.addEventListener( Event.MOUSE_LEAVE, leaveHandler );			STAGE.addEventListener( Event.ACTIVATE, activateHandler );			STAGE.addEventListener( Event.DEACTIVATE, deactivateHandler );			STAGE.addEventListener( Event.RENDER, renderHandler );		}			/**		 * Singleton Accessor		 * @return StageDisplay		 */				public static function getInstance() : StageDisplay {			if(!_instance) _instance = new StageDisplay( new SingletonEnforcer( ) );			return _instance;		}		/**		 * Shorthand singleton accessor getter		 * @return StageDisplay		 */		public static function get $() : StageDisplay {			return StageDisplay.getInstance( );			}		/**		 * Parameterized Stage initialization.		 * @param framerate movie framerate		 * @param align stage alignment		 * @param scale stage scaleMode.		 * @param quality movie quality		 * @param focusRect add object border focus		 * @return void		 */		public function init(framerate : int = 31, align : String = "TL", scale : String = "noScale", quality : String = "HIGH", focusRect : Boolean = false) : void {			this.frameRate = framerate;			this.align = align;			this.scaleMode = scale;			this.quality = quality;			this.focusRect = focusRect;		}		/**		 * Alert <code>DisplayObject</code>'s on the next opportunity to render the display list.		 * @see sekati.events.StageEvent#RENDER		 */		public function invalidate() : void {			STAGE.invalidate( );		}		// EVENT HANDLERS		/**		 * Dispatch a Fullscreen <code>StageEvent<code> for non-displayObjects.		 */		protected function fullscreenHandler(e : Event) : void {			dispatchEvent( new StageEvent( StageEvent.FULLSCREEN ) );		}		/**		 * Dispatch a Leave <code>StageEvent</code> for non-displayObjects.		 */		protected function leaveHandler(e : Event) : void {			if (!isNaN( _leaveIntervalId )) clearLeaveInterval( );			_leavePoint = new Point( stage.mouseX, stage.mouseY );			_leaveIntervalId = setInterval( leaveCompleteHandler, LEAVE_COMPLETE_DELAY_MS );			dispatchEvent( new StageEvent( StageEvent.LEAVE ) );		}		/**		 * Dispatch a LeaveComplete <code>StageEvent</code> for non-displayObjects.		 */		protected function leaveCompleteHandler() : void {			if(_leavePoint.x == stage.mouseX && _leavePoint.y == stage.mouseY) {				//Logger.$.info( this, "@@@ onLeaveComplete Fired! (" + LEAVE_COMPLETE_DELAY_MS + "ms expired since last mouse movement)" );				dispatchEvent( new StageEvent( StageEvent.LEAVE_COMPLETE ) );			}			clearLeaveInterval( );		}				/**		 * Dispatch a Activate <code>StageEvent</code> for non-displayObjects.		 */		protected function activateHandler(e : Event) : void {			dispatchEvent( new StageEvent( StageEvent.ACTIVATE ) );		}		/**		 * Dispatch a Deactivate <code>StageEvent</code> for non-displayObjects.		 */		protected function deactivateHandler(e : Event) : void {			dispatchEvent( new StageEvent( StageEvent.DEACTIVATE ) );		}		/**		 * Dispatch a Render <code>StageEvent</code> for non-displayObjects.		 */		protected function renderHandler(e : Event) : void {			dispatchEvent( new StageEvent( StageEvent.RENDER ) );		}						/**		 * Dispatch a Resize <code>StageEvent<code> for non-displayObjects.		 */		protected function resizeHandler(e : Event) : void {			if (!isNaN( _resizeIntervalId )) clearResizeInterval( );			_resizeIntervalId = setInterval( resizeCompleteHandler, RESIZE_COMPLETE_DELAY_MS );			dispatchEvent( new StageEvent( StageEvent.RESIZE ) );		}		/**		 * Dispatch a ResizeComplete <code>StageEvent</code> for non-displayObjects.		 */		protected function resizeCompleteHandler() : void {			Logger.$.info( this, "@@@ onResizeComplete Fired! (" + RESIZE_COMPLETE_DELAY_MS + "ms expired since last resize)" );			dispatchEvent( new StageEvent( StageEvent.RESIZE_COMPLETE ) );			clearResizeInterval( );		}		/**		 * Reset the <code>_resizeIntervalId</code>.		 */		protected function clearResizeInterval() : void {			clearInterval( _resizeIntervalId );			_resizeIntervalId = NaN;		}		/**		 * Reset the <code>_leaveIntervalId</code>.		 */		protected function clearLeaveInterval() : void {			clearInterval( _leaveIntervalId );			_leaveIntervalId = NaN;		}				// STAGE, WIDTHS, HEIGHTS, SIZES, et. al.				/**		 * Returns an reference to the application <code>Canvas.stage</code>.		 */		public function get stage() : Stage {			return STAGE;			}		/**		 * Returns an reference to the application <code>Canvas.root</code>.		 */		public function get root() : DisplayObject {			return ROOT;			}		/**		 * The current height, in pixels, of the Stage.		 * <p>Equivalent to: Canvas.stage.stageWidth</p>		 */		public function get width() : int {			return STAGE.stageWidth;		}		/**		 * The current width, in pixels, of the Stage.		 * <p>Equivalent to: Canvas.stage.stageHeight</p>		 */		public function get height() : int {			return STAGE.stageHeight;		}		/**		 * The current size of the stage.		 */		public function get size() : Rectangle {			return new Rectangle( 0, 0, width, height );		}				/**		 * Stage proportion.		 */		public function get proportion():Number {			return STAGE.stageWidth / STAGE.stageHeight;			}				/**		 * The width, in pixels, of the Stage contents.		 * <p>Equivalent to: Canvas.stage.width</p>		 */		public function get contentWidth() : Number {			return STAGE.width;		}		/**		 * The height, in pixels, of the Stage contents.		 * <p>Equivalent to: Canvas.stage.height</p>		 */		public function get contentHeight() : Number {			return STAGE.height;		}		/**		 * Stage horizontal center. 		 */		public function get centerX() : Number {			return STAGE.stageWidth / 2;		}				/**		 * Stage vertical center.		 */		public function get centerY() : Number {			return STAGE.stageHeight / 2;		}				/**		 * Stage center point.		 */		public function get center() : Point {			return new Point( centerX, centerY );		}		// FULLSCREEN				/**		 * Indicates the players fullscreen status.		 */		public function get fullscreen() : Boolean {			return (STAGE.displayState == "fullScreen") ? true : false;		}		/**		 * @private		 */		public function set fullscreen(b : Boolean) : void {			STAGE.displayState = (!b) ? StageDisplayState.NORMAL : StageDisplayState.FULL_SCREEN;		}		/**		 * Toggles the player between NORMAL and FULL_SCREEN.		 */		public function toggleFullscreen() : void {				fullscreen = !fullscreen;		}				// FRAMERATE, ALIGNMENT, QUALITY, FOCUS, SCALE, CONTEXT MENU				/**		 * Test if a DisplayObject has focus within the stage.		 * @example <listing version="3.0">		 * var textFocus : Boolean = StageDisplay.$.hasFocus( myTextField );		 * </listing>		 */		public function hasFocus(o : DisplayObject) : Boolean {			return (STAGE.focus == o);		}		/**		 * The frame rate of the stage.		 */		public function get frameRate() : int {			return STAGE.frameRate;		}		/**		 * @private		 */		public function set frameRate(n : int) : void {			STAGE.frameRate = n;		}		/**		 * A value from the StageScaleMode class that specifies which scale mode to use.		 * @see flash.display.StageScaleMode		 */				public function get scaleMode() : String {			return STAGE.scaleMode;		}				/**		 * @private		 */		public function set scaleMode(mode : String) : void {			STAGE.scaleMode = mode;		}		/**		 * Movie quality setting.		 * @see flash.display.StageQuality		 */		public function get quality() : String {			return STAGE.quality;		}		/**		 * @private		 */		public function set quality(mode : String) : void {			STAGE.quality = mode;		}		/**		 * Stage alignment		 * @see flash.display.StageAlign		 */		public function get align() : String {			return STAGE.align;		}		/**		 * @private		 */		public function set align(val : String) : void {			STAGE.align = val;		}		/**		 * Specifies whether or not objects display a glowing border when they have focus.		 */		public function get focusRect() : Boolean {			return STAGE.stageFocusRect;		}		/**		 * @private		 */		public function set focusRect(b : Boolean) : void {			STAGE.stageFocusRect = b;		}		/**		 * Returns value of property		 */		public function get showDefaultContextMenu() : Boolean {			return STAGE.showDefaultContextMenu;		}		/**		 * @private		 */		public function set showDefaultContextMenu(b : Boolean) : void {			STAGE.showDefaultContextMenu = b;		}		// CLEANUP		public function destroy() : void {			clearResizeInterval( );			STAGE.removeEventListener( Event.FULLSCREEN, fullscreenHandler );			STAGE.removeEventListener( Event.RESIZE, resizeHandler );			STAGE.removeEventListener( Event.MOUSE_LEAVE, leaveHandler );			STAGE.addEventListener( Event.ACTIVATE, activateHandler );			STAGE.addEventListener( Event.DEACTIVATE, deactivateHandler );			STAGE.addEventListener( Event.RENDER, renderHandler );						_instance = null;		}	}}/** * Internal class is accessible only to this AS file and is used  * as a constructor param to enforce proper Singleton behavior. */internal class SingletonEnforcer {}