/** * sekati.draw.Curve * @version 1.0.5 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.draw {	import flash.display.Shape;	import sekati.draw.ITweenableDrawing;	/**	 * Curve provides a Tweenable 3-point curved line which, unlike <code>Bezier</code> does not require a control point.	 * @see sekati.draw.Bezier	 */	public class Curve extends Shape implements ITweenableDrawing {				/**		 * I know this is BS but compiler bug in mxmlc prevents proper compilation.		 * @see http://bugs.adobe.com/jira/browse/ASC-2231		 */		public static const THICKNESS : Number = 1;		public static const COLOR : uint = 0x000000;		public static const ALPHA : Number = 1;		public static const HINTING : Boolean = true;		public static const SCALE_MODE : String = "none";		public static const CAPS : String = "square";		public static const JOINTS : String = "miter";		public static const MITER_LIMIT : Number = 3;			protected var _sx : Number;		protected var _sy : Number;		protected var _tx : Number;		protected var _ty : Number;		protected var _ex : Number;		protected var _ey : Number;		protected var _thickness : Number;		protected var _color : uint;		protected var _alpha : Number;		protected var _pixelHinting : Boolean;		protected var _scaleMode : String;		protected var _caps : String;		protected var _joints : String;		protected var _miterLimit : Number;		/**		 * Curve Constructor		 * @example <listing version="3.0">		 * var curve:Curve = new Curve(0, 0, 50,300, 100, 100, 1, 0xff0000);		 * addChild(curve);		 * Tweener.addTween(curve, {sx:200,sy:300,tx:100,ty:0,ex:900,ey:500, color:0xff00ff, transition:"easeOutQuint", time:5, onUpdate:renderCurve});		 * function renderCurve():void {		 * 	curve.draw();		 * }		 * </listing>		 */		public function Curve(startX : Number, startY : Number, thruX : Number, thruY : Number, endX : Number, endY : Number, thickness : Number = THICKNESS, color : uint = COLOR,  alpha : Number = ALPHA, pixelHinting : Boolean = HINTING, scaleMode : String = SCALE_MODE, caps : String = CAPS, joints : String = JOINTS, miterLimit : Number = MITER_LIMIT) {			_sx = startX;			_sy = startY;			_tx = thruX;			_ty = thruY;			_ex = endX;			_ey = endY;			_thickness = thickness;			_color = color;			_alpha = alpha;			_pixelHinting = pixelHinting;			_scaleMode = scaleMode;			_caps = caps;			_joints = joints;			_miterLimit = miterLimit;			draw( );		}		/**		 * @inheritDoc		 */		public function draw() : void {			var cx : Number = ((2 * _tx) - 0.5 * (_sx + _ex));			var cy : Number = ((2 * _ty) - 0.5 * (_sy + _ey));			this.graphics.lineStyle( _thickness, _color, _alpha, _pixelHinting, _scaleMode, _caps, _joints, _miterLimit );			this.graphics.moveTo( _sx, _sy );			this.graphics.curveTo( cx, cy, _ex, _ey );						}					/**		 * @inheritDoc		 */		public function redraw() : void {			clear( );			draw( );		}		/**		 * @inheritDoc		 */		public function clear() : void {			this.graphics.clear( );			}		/**		 * Return the start x pos.		 */		public function get sx() : Number {			return _sx;		}				/**		 * @private		 */		public function set sx(n : Number) : void {			_sx = n;		}				/**		 * Return the start y pos.		 */		public function get sy() : Number {			return _sy;		}		/**		 * @private		 */		public function set sy(n : Number) : void {			_sy = n;		}			/**		 * Return the thru x pos.		 */		public function get tx() : Number {			return _tx;		}				/**		 * @private		 */		public function set tx(n : Number) : void {			_tx = n;		}				/**		 * Return the thru y pos.		 */		public function get ty() : Number {			return _ty;		}		/**		 * @private		 */		public function set ty(n : Number) : void {			_ty = n;		}			/**		 * Return the end x pos.		 */		public function get ex() : Number {			return _ex;		}				/**		 * @private		 */		public function set ex(n : Number) : void {			_ex = n;		}		/**		 * Return the end y pos.		 */		public function get ey() : Number {			return _ey;		}		/**		 * @private		 */		public function set ey(n : Number) : void {			_ey = n;		}		/**		 * Return the color.		 */		public function get color() : uint {			return _color;		}		/**		 * @private		 */		public function set color(n : uint) : void {			_color = n;		}			/**		 * Return the thickness.		 */		public function get thickness() : uint {			return _thickness;		}		/**		 * @private		 */		public function set thickness(n : uint) : void {			_thickness = n;		}																}}