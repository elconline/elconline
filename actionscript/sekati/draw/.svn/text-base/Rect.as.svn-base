/** * sekati.draw.Rect * @version 1.0.5 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.draw {	import flash.display.Shape;	//import sekati.draw.DrawStyle;	import sekati.draw.ITweenableDrawing;	/**	 * Rect provides a Tweenable rectangle Shape.	 */	public class Rect extends Shape implements ITweenableDrawing {		/**		 * I know this is BS but compiler bug in mxmlc prevents proper compilation.		 * @see http://bugs.adobe.com/jira/browse/ASC-2231		 */		public static const THICKNESS : Number = 1;		public static const COLOR : uint = 0x000000;		public static const ALPHA : Number = 1;		public static const HINTING : Boolean = true;		public static const SCALE_MODE : String = "none";		public static const CAPS : String = "square";		public static const JOINTS : String = "miter";		public static const MITER_LIMIT : Number = 3;		 				protected var _width : Number;		protected var _height : Number;		protected var _sx : Number;		protected var _sy : Number;		protected var _thickness : Number;		protected var _color : uint;		protected var _alpha : Number;		protected var _pixelHinting : Boolean;		protected var _scaleMode : String;		protected var _caps : String;		protected var _joints : String;		protected var _miterLimit : Number;		/**		 * Rect Constructor		 * @example <listing version="3.0">		 * var rect:Rect = new Rect(300, 100, 50,50, 1, 0xffff00);		 * addChild(rect);		 * Tweener.addTween(rect, {sx:750, sy:0, w:300, h:30, color:0xffccee, alpha:0.25, thickness:5, transition:"easeOutQuad", time:5, onUpdate:renderRect});		 * function renderRect():void {		 * 	rect.redraw();		 * }		 * </listing>		 */		public function Rect(width : Number, height : Number, startX : Number = 0, startY : Number = 0, thickness : Number = THICKNESS, color : uint = COLOR,  alpha : Number = ALPHA, pixelHinting : Boolean = HINTING, scaleMode : String = SCALE_MODE, caps : String = CAPS, joints : String = JOINTS, miterLimit : Number = MITER_LIMIT) {			_width = width;			_height = height;			_sx = startX;			_sy = startY;			_thickness = thickness;			_color = color;			_alpha = alpha;			_pixelHinting = pixelHinting;			_scaleMode = scaleMode;			_caps = caps;			_joints = joints;			_miterLimit = miterLimit;			draw( );				}		/**		 * @inheritDoc		 */		public function draw() : void {			this.graphics.beginFill( _color, _alpha );			this.graphics.drawRect( _sx, _sy, _width, _height );			this.graphics.endFill( );								}		/**		 * @inheritDoc		 */		public function redraw() : void {			clear( );			draw( );		}		/**		 * @inheritDoc		 */		public function clear() : void {			this.graphics.clear( );			}		/**		 * Return the width.		 */		public function get w() : Number {			return _width;		}				/**		 * @private		 */		public function set w(n : Number) : void {			_width = n;		}				/**		 * Return the height.		 */		public function get h() : Number {			return _height;		}		/**		 * @private		 */		public function set h(n : Number) : void {			_height = n;		}				/**		 * Return the start x pos.		 */		public function get sx() : Number {			return _sx;		}				/**		 * @private		 */		public function set sx(n : Number) : void {			_sx = n;		}		/**		 * Return the start y pos.		 */		public function get sy() : Number {			return _sy;		}		/**		 * @private		 */		public function set sy(n : Number) : void {			_sy = n;		}		/**		 * Return the color.		 */		public function get color() : uint {			return _color;		}		/**		 * @private		 */		public function set color(n : uint) : void {			_color = n;		}			/**		 * Return the thickness.		 */		public function get thickness() : uint {			return _thickness;		}		/**		 * @private		 */		public function set thickness(n : uint) : void {			_thickness = n;		}															}}