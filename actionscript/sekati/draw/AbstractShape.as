/** * sekati.draw.AbstractShape * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php *  * Adapted from Collin Moock's BasicShape class. */package sekati.draw {	import flash.errors.IllegalOperationError;		import flash.events.Event;		import flash.display.JointStyle;		import flash.display.LineScaleMode;		import flash.display.Shape;	/**	 * AbstractShape provides an API base class for drawn shapes.	 */	public class AbstractShape extends Shape {		/**		 * Indicates the Shape needs to be redrawn and prevents redrawing		 * when other objects fire the RENDER event via stage.invalidate()		 */		protected var _changed : Boolean = false;		protected var fillColor : Number = 0xFFFFFF;		protected var fillAlpha : Number = 1;		protected var lineThickness : Number = 1;		protected var lineColor : uint = 0x000000;		protected var lineAlpha : Number = 1;		protected var linePixelHinting : Boolean = false;		protected var lineScaleMode : String = LineScaleMode.NORMAL;		protected var lineCaps : String = null;		protected var lineJoints : String = JointStyle.MITER;  		protected var lineMiterLimit : Number = 3;		/**		 * AbstractShape Constructor		 */		public function AbstractShape() {			addEventListener( Event.ADDED_TO_STAGE, onStage, false, 0, true );			addEventListener( Event.REMOVED_FROM_STAGE, offStage, false, 0, true );				}		/**		 * Define the line style of the shape.		 */		public function setStrokeStyle(thickness : Number = 1, color : uint = 0x000000, alpha : Number = 1, pixelHinting : Boolean = false, scaleMode : String = "normal", caps : String = null, joints : String = "miter", miterLimit : Number = 10) : void {			lineThickness = thickness;			lineColor = color;			lineAlpha = alpha;			linePixelHinting = pixelHinting;			lineScaleMode = scaleMode;			lineCaps = caps;			lineJoints = joints;			lineMiterLimit = miterLimit;			// The line style has changed, so ask to be notified of the			// next screen update. At that time, redraw the shape.			setChanged( );		}		/**		 * Define the fill style of the shape.		 */		public function setFillStyle(color : uint = 0xFFFFFF, alpha : Number = 1) : void {			fillColor = color;			fillAlpha = alpha;			// The fill style has changed, so ask to be notified of the			// next screen update. At that time, redraw the shape.			setChanged( );		}				/**		 * Shape has been added to stage: listen for screen update notifications.		 */		protected function onStage(e : Event) : void {			stage.addEventListener( Event.RENDER, render, false, 0, true );			// if changes occured before being added to the displayList redraw.			if (hasChanged( )) {				requestDraw( );			}					}		/**		 * Shape has been removed from stage: don't bother with screen updates.		 */		protected function offStage(e : Event) : void {			stage.removeEventListener( Event.RENDER, render );		}		/**		 * Handles screen updates when stage.invalidate() fires if the shape has changed.		 * We bother with this for overall performance sake.		 */		protected function render(e : Event) : void {			if (hasChanged( )) {				draw( );			}		}		/**		 * Draw the Shape graphics as defined by <code>AbstractShape</code> subclasses.		 * 		 * <p>In order to increase performance <code>draw()</code> is only called		 * when during a stage RENDER event fires.</p>		 */		protected function draw() : void {			graphics.clear( );			graphics.lineStyle( lineThickness, lineColor, lineAlpha, linePixelHinting, lineScaleMode, lineCaps, lineJoints, lineMiterLimit );			graphics.beginFill( fillColor, fillAlpha );			drawShape( );			graphics.endFill( );			clearChanged( );		}		/**		 * Draw the specific lines of the Shape as defined by <code>AbstractShape</code> subclasses.		 */		protected function drawShape() : void {			throw new IllegalOperationError( "AbstractShape.drawShape() may only be invoked by subclasses." );		}		/**		 * Flag the shape change which forces a redraw on the next render.		 */		protected function setChanged() : void {			_changed = true;			requestDraw( );		}		/**		 * Flag the shape change rendering has been completed.		 */		protected function clearChanged() : void {			_changed = false;		}		/**		 * Indicates whether the shape change has been rendered yet or not.		 */		protected function hasChanged() : Boolean {			return _changed;		}		/**		 * If the shape is on change request a stage RENDER event to force the shape to be drawn.		 */		protected  function requestDraw() : void {			if (stage != null) {				stage.invalidate( );			}		}	}}