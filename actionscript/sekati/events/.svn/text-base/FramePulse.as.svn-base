/** * sekati.events.FramePulse * @version 1.0.3 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.events {	import flash.display.Sprite;	import flash.events.Event;	import flash.events.EventDispatcher;	/**	 * FramePulse proxies an <code>ENTER_FRAME</code> event to any non-	 * <code>DisplayObject</code> classes which need to execute code on each frame tick.<br><br>	 * @example <listing version="3.0">	 * FramePulse.$.addFrameListener( enterFrame );	 * protected function enterFrame( e:Event ):void {	 * 	trace( "pulse" );	 * }	 * </listing>	 * @see http://www.onflex.org/code/2006/09/as3-singleton-example-by-andrew-trice.html	 */	public class FramePulse extends EventDispatcher {		protected static var _instance : FramePulse;		protected var _pulse : Sprite;		/**		 * FramePulse Singleton Constructor		 * @param $ SingletonEnforcer internal to the AS file; this param prevents external instantiation without error.		 */		public function FramePulse($ : SingletonEnforcer = null) {			if (!$) {				throw new ArgumentError( "sekati.events.FramePulse is a Singleton and may only be accessed via its accessor methods: 'getInstance()' or '$'." );			}		}		/**		 * Singleton Accessor		 * @return FramePulse		 */				public static function getInstance() : FramePulse {			if(!_instance) _instance = new FramePulse( new SingletonEnforcer( ) );			return _instance;		}		/**		 * Shorthand singleton accessor getter		 * @return FramePulse		 */		public static function get $() : FramePulse {			return FramePulse.getInstance( );		}		public function addFrameListener(handler : Function) : void {			if (!_pulse) {				_pulse = new Sprite( );				}			_pulse.addEventListener( Event.ENTER_FRAME, handler );		}		public function removeFrameListener(handler : Function) : void {			if(_pulse != null) {				_pulse.removeEventListener( Event.ENTER_FRAME, handler );			}		}		/**		 * Destroy the frame pulse and singleton instance.		 */		public function destroy() : void {			if(_pulse.hasEventListener( Event.ENTER_FRAME )) {				throw new Error( "The FramePulse still has frameListeners: please remove these before destroying." );				}			_pulse = null;			_instance = null;		}					}}/** * Internal class is accessible only to this AS file * and is used as a constructor param to enforce * proper Singleton behavior. */internal class SingletonEnforcer {}