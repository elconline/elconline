/** * sekati.filters.FilterBase * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php * Some code adapted from Fever RS FilterBuilder. */package sekati.filters {	import flash.display.DisplayObject;	import flash.filters.BevelFilter;	import flash.filters.BitmapFilter;	import flash.filters.BlurFilter;	import flash.filters.ColorMatrixFilter;	import flash.filters.DropShadowFilter;	import flash.filters.GlowFilter;	import flash.filters.GradientBevelFilter;	import flash.filters.GradientGlowFilter;		/**	 * FilterBase provides common filter generation.	 */	public class FilterBase {		/**		 * Return a default <code>DropShadowFilter</code>.		 * <ul>		 *   <li>length: 0</li>		 *   <li>direction: 45</li>		 *   <li>alpha: 100</li>		 *   <li>blurX: 10</li>		 *   <li>blurY: 10</li>		 *   <li>strength: 0.5</li>		 *   <li>quality: sekati.filters.FilterQuality#HIGH</li>		 * </ul>		 */		public static function getSoftShadowFilter() : DropShadowFilter {			return new DropShadowFilter( 0, 45, 0x000000, 100, 10, 10, 0.50, FilterQuality.HIGH );		}		/**		 * Return a predefined greyscale color matrix.		 */		public static function luminanceTransform() : ColorMatrixFilter {			var rwgt : Number = .3086;			var gwgt : Number = .6094;			var bwgt : Number = .0820;			var lumTransform : ColorMatrixFilter = new ColorMatrixFilter( new Array( rwgt, gwgt, bwgt, 0.0, 0.0, rwgt, gwgt, bwgt, 0.0, 0.0, rwgt, gwgt, bwgt, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 ) );			return lumTransform;		}			/**		 * Set a shadow filter.		 */		public static function setShadow( target : DisplayObject, filter : DropShadowFilter ) : DropShadowFilter {			clearFilterType( target, DropShadowFilter );			return addShadow( target, filter );		}		/**		 * Add a new shadow filter.		 */		public static function addShadow( target : DisplayObject, filter : DropShadowFilter  ) : DropShadowFilter {			addFilter( target, filter );			return filter;		}		/**		 * Remove all shadow filters.		 */		public static function cleanShadow( target : DisplayObject ) : void {			clearFilterType( target, DropShadowFilter );		}		/**		 * Set a glow filter.		 */		public static function setGlow( target : DisplayObject, filter : GlowFilter ) : GlowFilter {			clearFilterType( target, GlowFilter );			return addGlow( target, filter );		}		/**		 * Set a glow filter.		 */		public static function addGlow( target : DisplayObject, filter : GlowFilter ) : GlowFilter {			addFilter( target, filter );			return filter;		}		/**		 * Remove all glow filters.		 */		public static function cleanGlow( target : DisplayObject ) : void {			clearFilterType( target, GlowFilter );		}		/**		 * Set a bevel filter.		 */		public static function setBevel( target : DisplayObject, filter : BevelFilter ) : BevelFilter {			clearFilterType( target, BevelFilter );			return addBevel( target, filter );		}		/**		 * Add a new bevel filter.		 */		public static function addBevel( target : DisplayObject, filter : BevelFilter ) : BevelFilter {			addFilter( target, filter );			return filter;		}		/**		 * Remove all bevel filters.		 */		public static function cleanBevel( target : DisplayObject ) : void {			clearFilterType( target, BevelFilter );		}		/**		 * Set a color filter.		 */		public static function setColorMatrix( target : DisplayObject, filter : ColorMatrixFilter ) : ColorMatrixFilter {			clearFilterType( target, ColorMatrixFilter );			return addColorMatrix( target, filter );		}		/**		 * Add a new color filter.		 */		public static function addColorMatrix( target : DisplayObject, filter : ColorMatrixFilter ) : ColorMatrixFilter {			addFilter( target, filter );			return filter;		}		/**		 * Set a gradient glow filter.		 */		public static function setGradientGlow( target : DisplayObject, filter : GradientGlowFilter ) : GradientGlowFilter {			clearFilterType( target, GradientGlowFilter );			return addGradientGlow( target, filter );		}		/**		 * Add a new gradient glow filter.		 */		public static function addGradientGlow( target : DisplayObject, filter : GradientGlowFilter ) : GradientGlowFilter {			addFilter( target, filter );			return filter;		}		/**		 * Remove all gradient glow filters.		 */		public static function cleanGradientGlow( target : DisplayObject ) : void {			clearFilterType( target, GradientGlowFilter );		}		/**		 * Set a gradient bevel filter.		 */		public static function setGradientBevel( target : DisplayObject, filter : GradientBevelFilter ) : GradientBevelFilter {			clearFilterType( target, GradientBevelFilter );			return addGradientBevel( target, filter );		}		/**		 * Add a new gradient bevel filter.		 */		public static function addGradientBevel( target : DisplayObject, filter : GradientBevelFilter ) : GradientBevelFilter {			addFilter( target, filter );			return filter;		}		/**		 * Remove all gradient bevel filters.		 */		public static function cleanGradientBevel( target : DisplayObject ) : void {			clearFilterType( target, GradientBevelFilter );		}		/**		 * Set a blur filter.		 */		public static function setBlur( target : DisplayObject, filter : BlurFilter ) : BlurFilter {			clearFilterType( target, BlurFilter );			return addBlur( target, filter );		}		/**		 * Add a new blur filter.		 */		public static function addBlur( target : DisplayObject, filter : BlurFilter ) : BlurFilter {			addFilter( target, filter );			return filter;		}		/**		 * Remove all blur filters.		 */		public static function cleanBlur( target : DisplayObject ) : void {			clearFilterType( target, BlurFilter );		}		/**		 * Add a filter.		 */		public static function addFilter( target : DisplayObject = null, filter : BitmapFilter = null ) : void {			if( target == null || filter == null ) return;			var tmp : Array = target.filters;			tmp.push( filter );			target.filters = tmp;		}		/**		 * Remove a filter.		 */		public static function removeFilter( target : DisplayObject = null, filter : BitmapFilter = null ) : void {			if( target == null || filter == null ) return;			var tmp : Array = target.filters;			var index : int = getFilterIndex( target, filter );			if ( index > -1 ) {				tmp.splice( index, 1 );                				target.filters = tmp;			}		}		/**		 * Remove all filters.		 */		public static function clean( target : DisplayObject ) : void {			target.filters = new Array( );		}		/**		 * Removes all filters by <code>filterType</code>.		 */		public static function clearFilterType( target : DisplayObject = null, filterType : Class = null ) : void {			if( target == null || filterType == null ) return;						var len : int = target.filters.length;			var tmp : Array = new Array( );						for( var i : int = 0; i < len ; i++ ) {				var f : BitmapFilter = target.filters[i];				if( !( f is filterType ) ) tmp.push( f );			}			target.filters = tmp;		}		/**		 * Return the filter by <code>filterType</code> or -1 if no match is found.		 */		public static function getFilterIndex( target : DisplayObject = null, filter : BitmapFilter = null ) : int {			if ( target == null ) return -1;	        			var pos : int = target.filters.length;			while( pos-- ) {				var f : BitmapFilter = target.filters[pos];				if( f == filter ) {					return pos;				}			}			return -1;		}		/**		 * Return the filter index by <code>filterType</code> or -1 if no match is found.		 */		public static function getFilterTypeIndex( target : DisplayObject = null, filterType : Class = null ) : int {			if ( target == null ) return -1;	        			var pos : int = target.filters.length;			while( pos-- ) {				var f : BitmapFilter = target.filters[pos];				if( f is filterType ) return pos;			}			return -1;		}				/**		 * FilterBase Static Constructor		 */		public function FilterBase() {			throw new Error( "FilterBase is a static class and cannot be instantiated." );		}			}}