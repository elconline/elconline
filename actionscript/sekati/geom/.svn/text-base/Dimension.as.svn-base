/** * sekati.geom.Dimension * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.geom {	/**	 * Store width and height integer Dimensions and provides various methods of manipulations.	 */	public class Dimension {		public var width : int;		public var height : int;		/**		 * Dimension Constructor		 * @param w the width		 * @param h the height		 */		public function Dimension(w : int = 0, h : int = 0) {			width = w;			height = h;		}		/**		 * Returns <code>true</code> if the passed Dimension fits within the bounds of this Dimension. 		 * A Dimension of the same size is considered to "fit".		 * @param d the dimension being tested		 * @return Boolean		 */		public function contains(d : Dimension) : Boolean {			return width >= d.width && height >= d.height;		}		/**		 * Returns <code>true</code> if this Dimension properly contains the one specified.  		 * Proper containment is defined as containment using "<", instead of "<=".		 * 		 * @param d the dimension being tested		 * @return <code>true</code> if this Dimension properly contains the one specified		 */		public function containsProper(d : Dimension) : Boolean {			return width > d.width && height > d.height;		}		/**		 * This Dimension is intersected with the one specified. intersection is performed by 		 * taking the min() of the values from each dimension.		 * 		 * @param d the Dimension used to perform the min()		 * @return <code>this</code> for convenience		 */		public function intersect(d : Dimension) : Dimension {			width = Math.min( d.width, width );			height = Math.min( d.height, height );			return this;		}		/**		 * Sets the width of this Dimension to the greater of this Dimension's width and 		 * <i>d</i>.width. Likewise for this Dimension's height.		 * 		 * @param d the Dimension to union with this Dimension		 * @return <code>this</code> for convenience		 */		public function union(d : Dimension) : Dimension {			width = Math.max( width, d.width );			height = Math.max( height, d.height );			return this;		}		/**		 * Returns the area of this Dimension.		 * 		 * @return the area		 */		public function getArea() : Number {			return width * height;		}		/**		 * Returns <code>true</code> if the Dimension has width or height greater than 0.		 *		 * @return <code>true</code> if this Dimension is empty		 */		public function isEmpty() : Boolean {			return (width == 0) || (height == 0);		}		/**		 * Creates and returns a copy of this Dimension.		 *		 * @return a copy of this Dimension		 */		public function clone() : Dimension {			return new Dimension( width, height );		}		/**		 * Returns whether the input Object is equivalent to this Dimension. <code>true</code> if 		 * the Object is a Dimension and its width and height are equal to this Dimension's width		 * and height, <code>false</code> otherwise.		 * 		 * @param d the Object being tested for equality		 * @return <code>true</code> if the given object is equal to this dimension		 */		public function equals(d : Dimension) : Boolean {			if(d == null) {				return false;			}			return (d.width == width && d.height == height);		}		/**		 * Expands the size of this Dimension by the specified width and height.		 * 		 * @param w  Value by which the width should be increased		 * @param h  Value by which the height should be increased		 * @return <code>this</code> for convenience		 */		public function expand(w : Number = 0, h : Number = 0) : Dimension {               			width += w;			height += h;			return this;		}		/**		 * Scales the width of this Dimension by <i>w</i> and scales the height of this Dimension 		 * by <i>h</i>. Returns this for convenience. 		 *		 * @param w the value by which the width is to be scaled		 * @param h the value by which the height is to be scaled		 * @return <code>this</code> for convenience		 * @throw ArgumentError if scale arguments is negative.		 */		public function scale(w : Number = 0, h : Number = 0) : Dimension {			width = Number( width * w );			height = Number( height * h );			return this;		}		/**		 * Reduces the width of this Dimension by <i>w</i>, and reduces the height of this 		 * Dimension by <i>h</i>. Returns this for convenience.		 *		 * @param w the value by which the width is to be reduced		 * @param h the value by which the height is to be reduced		 * @return <code>this</code> for convenience		 */		public function shrink(w : Number = 0, h : Number = 0) : Dimension {               			width = width - w;			height = height - h;			return this;		}		//debug info		public function toString() : String {			return "[Dimension width=" + width + ", height=" + height + "]";		}			}}