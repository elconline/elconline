/** * sekati.geom.Point3D * @version 1.0.1 * @author jason m horwitz | sekati.com * Copyright (C) 2008 jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.geom {	import sekati.geom.Point;	import sekati.geom.TrigBase;		/**	 * Point3D extends sekati.geom.Point with a Z-axis.	 * @example var p:Point3D = new sekati.geom.Point3D(10,10,50);	 */	public class Point3D extends Point {		public var z : Number;		/**		 * Constructor		 * @param nX (Number)		 * @param nY (Number)		 * @param nZ (Number)		 */		public function Point3D(nX : Number = 0, nY : Number = 0, nZ : Number = 0) {			super( nX, nY );			z = nZ;		}		/**		 * check if two 3D points match		 * @param p (Point3D)		 * @return Boolean		 */		public function isEqual3D(p : Point3D) : Boolean {			return (p.x == x && p.y == y && p.z == z);		}		/**		 * get Z distance between two points		 * @param p (Point3D)		 * @return Number		 */		public function getZDistance(p : Point3D) : Number {			return TrigBase.getZDistance( this, p );		}		/**		 * Returns a new 3D point based on this point with x and y offset values		 * @param nX (Number)		 * @param nY (Number)		 * @param nZ (Number)		 * @return Point3D		 */		public function displace3D(nX : Number, nY : Number, nZ : Number) : Point3D {			return new Point3D( x + nX, y + nY, z + nZ );		}		/**		 * Offset the Point3D object by a specified amount.		 * @param x (Number) horizontal offset		 * @param y (Number) vertical offset		 * @param z (Number) z-axis offset		 * @return Void		 */		public function offset3D(x : Number, y : Number, z : Number) : void {			super.offset( x, y );			this.z += z;		}			/**		 * Clone this Point3D.		 * @return Point3D		 */		public function clone3D() : Point3D {			return new Point3D( this.x, this.y, this.z );		}			}}