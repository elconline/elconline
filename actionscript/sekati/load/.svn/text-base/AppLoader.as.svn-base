/** * sekati.load.AppLoader * @version 1.1.0 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.load {	import flash.events.Event;	import flash.events.EventDispatcher;	import sekati.display.Canvas;	import sekati.events.BootstrapEvent;	import sekati.events.FramePulse;	import sekati.log.Logger;		/**	 * AppLoader provides a baseline (invisible) preloader facility for Application SWF files that implement the core API. 	 * The loader insures that the SWF has been fully loaded by the client browser before initialization.	 * Once loading is complete <code>BootstrapEvent.APP_LOAD</code> is dispatched.	 * 	 * <p><b>Note:</b> This is not a visual preloader and should not be treated as such as it would suffer 	 * from the traditional visual preloader chicken-egg issue. Rather, it is a preventative code executation	 * measure. If a visual preloader is necessary for your API based application consider a wrapper visual 	 * preloader SWF.</p>	 */	public class AppLoader extends EventDispatcher {		protected var _loaded : Number;		protected var _total : Number;		protected var _percent : Number;				/**		 * AppLoader Constructor		 * @param init	begins load checking.		 */		public function AppLoader(init : Boolean = true) {			if( init ) {				load( );			}		}		/**		 * Begin checking the SWF load status.		 */		public function load() : void {			FramePulse.$.addFrameListener( _enterFrame );		}		/**		 * Frame-based load handler; dispatches <code>BootstrapEvent.APP_LOAD</code> on completion.		 */		protected function _enterFrame(e : Event) : void {			_loaded = Canvas.loaderInfo.bytesLoaded;			_total = Canvas.loaderInfo.bytesTotal;			_percent = _loaded * 100 / _total;			//trace( "preloading: " + _loaded + "/" + _total + " (" + _percent + ")" );			if (_loaded >= _total && _percent >= 100) {				Logger.$.status( this, "	@@@ - Loaded Successfully ..." );				FramePulse.$.removeFrameListener( _enterFrame );				dispatchEvent( new BootstrapEvent( BootstrapEvent.APP_LOAD ) );			}		}		/**		 * Return the bytes loaded.		 */		public function get loaded() : Number {			return _loaded;			}		/**		 * Return the total bytes.		 */		public function get total() : Number {			return _total;			}		/**		 * Return the percent loaded.		 */		public function get percent() : Number {			return _percent;			}	}}