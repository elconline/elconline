/** * sekati.load.AbstractLoader * @version 1.0.1 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.load {	import flash.events.Event;		import flash.events.EventDispatcher;	import flash.net.URLRequest;	import flash.net.URLVariables;		import sekati.load.ILoader;		/**	 * AbstractLoader provides a common abstraction layer for Loader & URLLoader based API loader classes.	 * 	 * The type of loader we are abstracting to depends on the asset type being loaded:	 * <ul><li><b>Loader</b>: loads Bitmap's, SWF's & other DisplayObject loadable assets.</li>	 * <li><b>URLLoader</b>: loads text, html, sound, xml & other non-DisplayObject loadable assets.</li></ul>	 * @see flash.display.Loader	 * @see flash.net.URLLoader			 */	public class AbstractLoader extends EventDispatcher implements ILoader {		protected var _urlRequest : URLRequest;		protected var _hasCacheBuster : Boolean;		protected var _running : Boolean;		/**		 * AbstractLoader Constructor		 */		public function AbstractLoader( urlRequest : URLRequest = null, hasCacheBuster : Boolean = false ) {			request = urlRequest;			_hasCacheBuster = hasCacheBuster;			_running = false;		}		/**		 * Stub Function: begin the loading process.		 */		public function load( url : URLRequest = null ) : void {		}		/**		 * Stub Function: stop the loading process.		 */		public function close( ) : void {		}		/**		 * Called when loading begins for run tracking.		 */		protected function loadStart(e : Event = null) : void {			_running = true;			if (e != null ) {				dispatchEvent( e );				}		}		/**		 * Called when loading ends for run tracking.		 */		protected function loadStop(e : Event = null) : void {			_running = false;			if (e != null ) {				dispatchEvent( e );				}		}		/**		 * Return the URLRequest object.		 */		public function get request() : URLRequest {			if( _hasCacheBuster ) {				var uv : URLVariables = ( _urlRequest.data != null ) ? URLVariables( _urlRequest.data ) : new URLVariables( );				uv.random = Math.round( Math.random( ) * 10000 );				_urlRequest.data = uv;			}			return _urlRequest;		}		/**		 * @private		 */		public function set request(r : URLRequest) : void {			if( r != null ) {				_urlRequest = r;			}		}		/**		 * Return the loaders running status.		 */		public function get running() : Boolean {			return _running;			}	}}