/** * sekati.math.Random * @version 1.0.1 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php *  * Parts of this class were adapted from Grant Skinner's Rnd lib. */package sekati.math {	/**	 * Random provides advanced randomness API.	 * @see sekati.math.MathBase for a generic random().	 * @see sekati.math.Range for more range based random methods.	 * @see sekati.math.RandomSeed for a seeded random API.	 */	public class Random {		/**		 * Returns a random integer between 0-1 exclusive.		 */		public static function randBit() : Number {			return Math.random( );		}		/**		 * Returns a random hexidecimal color.		 */		public static function hexColor() : uint {			return Number( "0x" + Math.floor( Math.random( ) * 16777215 ).toString( 16 ).toUpperCase( ) );		}		/**		 * Returns a random float.		 * @example <listing version="3.0">		 * Random.float(50); // returns a number between 0-50 exclusive		 * Random.float(20,50); // returns a number between 20-50 exclusive		 * </listing>		 */		public static function float(min : Number,max : Number = NaN) : Number {			if (isNaN( max )) { 				max = min; 				min = 0; 			}			return randBit( ) * (max - min) + min;		}		/**		 * Return a "tilted" random Boolean value.		 * @param chance	Percentage chance advantage of true.		 * @example <listing version="3.0">		 * Random.boolean(); // returns 50% chance of true.		 * Random.boolean(.75); // returns 75% chance of true.		 * </listing>		 */		public static function boolean(chance : Number = 0.5) : Boolean {			return (randBit( ) < chance);		}		/**		 * Return a "tilted" value of 1 or -1.		 * @param chance	Percentage chance advantage of true.		 * @example <listing version="3.0">		 * Random.sign(); // returns 50% chance of 1.		 * Random.sign(.75); // returns 75% chance of 1.		 * </listing>		 */				public static function sign(chance : Number = 0.5) : int {			return (randBit( ) < chance) ? 1 : -1;		}		/**		 * Return a "tilted" value of 1 or 0.		 * @param chance	Percentage chance advantage of true.		 * @example <listing version="3.0">		 * Random.bit(); // returns 50% chance of 1.		 * Random.bit(.75); // returns 75% chance of 1.		 * </listing>		 */						public static function bit(chance : Number = 0.5) : int {			return (randBit( ) < chance) ? 1 : 0;		}		/**		 * Return a random integer.		 * @param chance	Percentage chance advantage of true.		 * @example <listing version="3.0">		 * Random.integer(25); // returns an integer between 0-24 inclusive.		 * Random.integer(10,25); // returns an integer between 10-24 inclusive.		 * </listing>		 */						public static function integer(min : Number,max : Number = NaN) : int {			if (isNaN( max )) { 				max = min; 				min = 0; 			}			// Need to use floor instead of bit shift to work properly with negative values:			return Math.floor( float( min, max ) );		}				/**		 * Random Static Constructor		 */		public function Random() {			throw new Error( "Random is a static class and cannot be instantiated." );		}			}}