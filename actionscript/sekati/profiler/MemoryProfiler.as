/** * sekati.profiler.MemoryProfiler * @version 1.0.1 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.profiler {	import flash.display.LineScaleMode;	import flash.display.Sprite;	import flash.events.EventDispatcher;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	//import flash.filters.GlowFilter;	import flash.utils.Timer;	import flash.system.System;		//import sekati.display.StageDisplay;	/**	 * MemoryProfiler	 */	public class MemoryProfiler extends Sprite {		protected static var __timer : Timer = new Timer( 100, 0 );		protected static var __display : Sprite = new Sprite( );		protected static var widthOnInit : Number;		protected static var heightOnInit : Number;		protected static var __maxMemory : Number;		/**		 * MemoryProfiler Constructor		 */		public function MemoryProfiler(w : int = 100, h : int = 150) {						widthOnInit = w; 			//StageDisplay.$.width;			heightOnInit = h; 			//StageDisplay.$.height;			__display.graphics.beginFill( 0x33FF33, 0 );			__display.graphics.lineStyle( 1, 0x33FF33, 0.4, true, LineScaleMode.NONE );						__display.graphics.moveTo( 0, heightOnInit );			//__display.filters = [ new GlowFilter( 0x33FF33, 1, 1, 1 ) ];			addChild( __display );						__timer.addEventListener( TimerEvent.TIMER, updateDisplay, false, 0, true );			__timer.start( );						addEventListener( MouseEvent.MOUSE_DOWN, enableDrag );			addEventListener( MouseEvent.MOUSE_UP, disableDrag );					}		/**		 * Return a snapshot of the global FlashPlayer memory consumption.		 */		public static function snapshot() : String {			var currentMemValue : uint = System.totalMemory;			var message : String = "Memory: " + Math.round( currentMemValue / 1024 / 1024 * 100 ) / 100 + " MB (" + Math.round( currentMemValue / 1024 ) + " kb)";			return message;		}				protected function enableDrag( e : MouseEvent ) : void {			startDrag( false );		}		protected function disableDrag( e : MouseEvent ) : void {			stopDrag( );		}		protected static function updateDisplay( e : TimerEvent ) : void {			var totalMemory : Number = System.totalMemory;			__maxMemory = Math.max( __maxMemory, totalMemory );									var memoryScaled : Number = totalMemory / 102400;			var secondsElapsed : Number = ( __timer.delay * __timer.currentCount ) / 100;			__display.graphics.moveTo( secondsElapsed, heightOnInit );			__display.graphics.lineTo( secondsElapsed, heightOnInit - memoryScaled );						trace( snapshot( ) );						// mem test			//var mem : String = Number( System.totalMemory / 1024 / 1024 ).toFixed( 2 ) + 'Mb';			//trace( mem ); // eg traces "24.94Mb"					}		//______________________________________________________________________ GETTERS		public static function get currentMemory( ) : Number {			return System.totalMemory;		}		public static function get peakMemory( ) : Number {			return __maxMemory;		}					}}