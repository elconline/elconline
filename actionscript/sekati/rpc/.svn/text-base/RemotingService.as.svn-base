/** * sekati.rpc.RemotingService * @version 1.0.2 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.rpc {	import flash.net.NetConnection;	import flash.net.ObjectEncoding;	import flash.net.Responder;	import sekati.events.ServiceEvent;	import sekati.log.Logger;		/**	 * RemotingService provides a basic remoting service wrapper for <b>AMF Remoting</b> (usually to 	 * <a href="http://www.amfphp.org/">AMFPHP</a>).	 * 	 * TODO - REQUIRES FIXING.	 * 	 * @example <listing version="3.0">	 * 	var rs : RemotingService = new RemotingService( "http://www.5etdemi.com/amfphp/gateway.php" );	 * 		 * 	rs.addEventListener( ServiceEvent.FAULT, faultHandler );	 * 	rs.addEventListener( ServiceEvent.RESULT, resultHandler );	 * 		 * 	rs.execute( 'Class.method', {arg1:"foo", arg2:"13"} );	 * 		 * 	protected function resultHandler(e : ServiceEvent) : void {	 * 		trace( "RESULT.HANDLER:###:::::%%%%=> [" + e.result + "]" );	 * 	}		 * 		 * 	protected function faultHandler(e : ServiceEvent) : void {	 * 		trace( "FAULT.HANDLER:###:::::%%%%=> [" + e.fault + "]" );	 * 	}			 * </listing>	 * 	 * @see http://osflash.org/documentation/amf/recordset	 * @see http://livedocs.adobe.com/flash/9.0/ActionScriptLangRefV3/flash/net/Responder.html	 */	public class RemotingService extends NetConnection {		protected var responder : Responder;		/**		 * RemotingService Constructor		 * @param gatewayURL the AMFPHP service gateway URL.		 */		public function RemotingService(gatewayURL : String) {			//responder = new Responder( resultHandler, faultHandler );			responder = new Responder( callHandler );			objectEncoding = ObjectEncoding.AMF0;			connect( gatewayURL );		}		/**		 * Execute a remote call.		 * @param command of the remote method		 * @param args to pass to remote method call.		 */		public function execute(command : String, ...args) : void {			super.call( command, responder, args );		}		/**		 * Handle the call return; determine whether it is a result or a 		 * fault and dispatch the appropriate event.		 */		protected function callHandler(o : Object) : void {			if(!o.result) {				Logger.$.error( this, "RemotingService FAULT => " + o.fault );				dispatchEvent( new ServiceEvent( ServiceEvent.FAULT, null, o.fault ) );			} else {				Logger.$.info( this, "RemotingService RESULT => " + o.result );				dispatchEvent( new ServiceEvent( ServiceEvent.RESULT, o.result ) );			}		}		/**		 * Dispatch the results of a remoting method call.		 */		protected function resultHandler(result : *) : void {			Logger.$.info( this, "RemotingService RESULT => " + result );			dispatchEvent( new ServiceEvent( ServiceEvent.RESULT, result ) );		}		/**		 * Dispatch information about failures.		 */		protected function faultHandler(fault : *) : void {			Logger.$.error( this, "RemotingService FAULT => " + fault );			dispatchEvent( new ServiceEvent( ServiceEvent.FAULT, null, fault ) );					}	}}