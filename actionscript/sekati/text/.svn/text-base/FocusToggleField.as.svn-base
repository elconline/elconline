/** * sekati.text.FocusToggleField * @version 1.0.1 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.text {	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TextEvent;	import flash.text.TextField;	import flash.text.TextFieldType;		import sekati.display.Canvas;			/**	 * FocusToggleField provides a togglable input TextField created in created in code (versus the IDE).	 * 	 * <p><b>Warning</b>: Your TextField or DisplayObject containing the TextField must	 * be added to stage before the FocusToggle is instantiated for proper functionality.</p>	 * 	 * @example <listing version="3.0">	 * 	var t : FocusToggleField = new FocusToggleField( );	 * 	t.text = "Hello World!";	 * 	t.x = 50;	 * 	t.y = 50;	 * 	t.width = 500;	 * 	t.height = 100;	 * 	t.background = true;	 * 	t.backgroundColor = 0xffffff;	 * 	t.border = true;	 * 	t.borderColor = 0x999999;	 * 	addChild( t );	 * </listing>	 * 	 *  @see sekati.text.FocusToggleSprite	 */	public class FocusToggleField extends TextField {		protected var _defaultValue : String;		/**		 * FocusToggleField Constructor		 */		public function FocusToggleField() {			super.type = TextFieldType.INPUT;			addEventListener( TextEvent.TEXT_INPUT, inputHandler, false, 0, true );			addEventListener( MouseEvent.CLICK, focusHandler, false, 0, true );			Canvas.stage.addEventListener( MouseEvent.CLICK, focusHandler, false, 0, true );		}				/**		 * Handle the input event: store the default value including 		 * the latest character contained in the event.		 */		protected function inputHandler(e : TextEvent) : void {			_defaultValue = (text + e.text);		}		/**		 * Handle the focus event.		 */		protected function focusHandler(e : Event) : void {			super.text = (focus) ? '' : _defaultValue;		}		/**		 * Set the default text on the TextField & store it as the last defaultValue.		 */		override public function set text(value : String) : void {			super.text = value;			_defaultValue = value;		}		/**		 * Disallow any but TextFieldType.INPUT as type.		 */		override public function set type(value : String) : void {			throw new Error( "FocusToggleField must be TextFieldType.INPUT & cannot be user defined." );		}		/**		 * Boolean value which determines whether the TextField is focused or not.		 */		public function get focus() : Boolean {			return (this.stage.focus == this);			}	}}