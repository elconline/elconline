/** * sekati.ui.Image * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.ui {	import flash.events.SecurityErrorEvent;		import flash.display.Bitmap;	import flash.display.Loader;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.net.URLRequest;	import flash.system.LoaderContext;	import sekati.display.CoreSprite;	import sekati.log.Logger;			/**	 * Image provides a loadable <code>Bitmap</code> Image <code>DisplayObject</code>.	 */	public class Image extends CoreSprite {		/*** private */		protected var _loader : Loader;		/*** private */				protected var _request : URLRequest;		/*** private */		protected var _bmp : Bitmap;		/*** private */		protected var _bytesLoaded : uint;		/*** private */		protected var _bytesTotal : uint;		/*** private */		protected var _isLoaded : Boolean;		/*** private */		protected var _isRunning : Boolean;		/**		 * Image Constructor		 * @param url 				location of the bitmap image to be loaded.		 * @param loadImmediately 	whether to start the loading immediately or wait for a manual <code>load()</code> call.		 * @example <listing version="3.0">		 * 	var img : Image = new Image( "http://localhost/logo.png" );		 * 	img.alpha = 0;		 * 	addChild( img );		 * 			 * 	img.addEventListener( ProgressEvent.PROGRESS, progressHandler );		 * 	img.addEventListener( Event.INIT, loadHandler );		 * 			 * 	private function progressHandler(e:ProgressEvent):void {		 * 		trace( "img progress: "+e.target.bytesLoaded + "/" + e.target.bytesTotal );		 * 	}		 * 			 * 	private function loadHandler(e:Event):void {		 * 		trace( "img loaded: smoothed bitmap available via img.bmp!" );		 * 				 * 		Tweener.addTween( img, { alpha:1, time:0.5, transition:"easeOutQuad" } );		 * 				 * 		img.removeEventListener( ProgressEvent.PROGRESS, progressHandler );		 * 		img.removeEventListener( Event.INIT, loadHandler );		 * 	}		 * </listing>		 */		public function Image(url : String, loadImmediately : Boolean = true) {			super( );			_isLoaded = false;			_isRunning = false;			_request = new URLRequest( url );			_loader = new Loader( );			configListeners( );			if (loadImmediately) {				load( );			}		}		/**		 * Begin the load process.		 */		public function load() : void {			_isRunning = true;			// to check out secure link checkPolicyFile property can be set to true.			var crossdomain : LoaderContext = new LoaderContext( );			crossdomain.checkPolicyFile = true;			_loader.load( _request, crossdomain );			dispatchEvent( new Event( Event.OPEN, true ) );		}		/**		 * Cancel the <code>load()</code> operation in progress.		 */		public function close() : void {			if(_isRunning) {				_loader.close( );				configListeners( false );				dispatchEvent( new Event( Event.CLOSE, true ) );			}		}		/**		 * Configure the adding and removing of Image listeners.		 * @param isAdd 	<code>true</code> add's the listeners, <code>false</code> removes them.		 */		protected function configListeners(isAdd : Boolean = true) : void {			var setListener : String = (isAdd) ? "addEventListener" : "removeEventListener";			_loader.contentLoaderInfo[setListener]( Event.INIT, initHandler );			_loader.contentLoaderInfo[setListener]( ProgressEvent.PROGRESS, progressHandler );			_loader.contentLoaderInfo[setListener]( IOErrorEvent.IO_ERROR, errorHandler );			_loader.contentLoaderInfo[setListener]( SecurityErrorEvent.SECURITY_ERROR, errorHandler );		}		/**		 * Dispatch ImageEvent.PROGRESS		 */				protected function progressHandler(e : ProgressEvent) : void {			_bytesLoaded = e.bytesLoaded;			_bytesTotal = e.bytesTotal;			dispatchEvent( new Event( ProgressEvent.PROGRESS, true ) );		}		/**		 * Dispatch ImageEvent.ERROR		 */				protected function errorHandler(e : Event) : void {			Logger.$.error( this, "Unable to load Image: " + request.url );		}				/**		 * Dispatch ImageEvent.INIT		 */		protected function initHandler(e : Event) : void {			_isLoaded = true;			_isRunning = false;			_bmp = e.target.content as Bitmap;			_bmp.smoothing = true;			addChild( _bmp );			configListeners( false );			dispatchEvent( new Event( Event.INIT, true ) );		}		/**		 * @inheritDoc		 */		override public function destroy() : void {			configListeners( false );			_loader = null;						super.destroy( );		}		/**		 * Return <code>true</code> if Image is loading, <code>false</code> if not.		 */				public function get running() : Boolean {			return _isRunning;		}		/**		 * Return <code>true</code> if Image is done loading, <code>false</code> if not.		 */				public function get loaded() : Boolean {			return _isLoaded;		}		/**		 * Return the Image <code>URLRequest</code>.		 */		public function get request() : URLRequest {			return _request;		}		/**		 * Return the Image <code>bytesLoaded</code>.		 */				public function get bytesLoaded() : uint {			return _bytesLoaded;		}		/**		 * Return the Image <code>bytesTotal</code>.		 */			public function get bytesTotal() : uint {			return _bytesTotal;		}		/**		 * Return the Image <code>Bitmap</code>.		 */		public function get bmp() : Bitmap {			return _bmp;		}		/**		 * @private		 */		public function set bmp( b : Bitmap ) : void {			_bmp = b;		}	}}