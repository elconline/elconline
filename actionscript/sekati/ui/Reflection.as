/** * sekati.ui.Reflection * @version 1.0.1 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php *  * Portions of this class were adapted from Script.it */package sekati.ui {	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.DisplayObjectContainer;	import flash.display.GradientType;	import flash.display.SpreadMethod;	import flash.display.Sprite;	import flash.geom.Matrix;	import sekati.display.CoreSprite;		/**	 * Reflection provides a UI reflection to a DisplayObject.	 */	public class Reflection extends CoreSprite {		public var reflectSource : DisplayObjectContainer;		public var reflectionHeight : int;		public var reflectionStrength : Number;		public var reflectionOffsetY : int;		protected var reflectionHolder : Sprite;		protected var reflectionMask : Sprite;		protected var reflectionBmp : Bitmap;		/**		 * Reflection Constructor		 */		public function Reflection( source : DisplayObjectContainer, height : int = 255, strength : Number = 1, yOffset : int = 1 ) {			super( );			reflectSource = source;			reflectionHeight = height;			reflectionStrength = strength;			reflectionOffsetY = yOffset;			init( );					}		/**		 * @private		 */		protected function init() : void {			buildReflection( );			attachItems( );			positionElements( );		}		/**		 * @private		 */		protected function buildReflection() : void {			reflectionHolder = new Sprite( ); 			var bmd : BitmapData = new BitmapData( reflectSource.width, reflectSource.height, true, 0xc61916 );			bmd.draw( reflectSource ); 			reflectionBmp = new Bitmap( bmd );			reflectionBmp.y = reflectionBmp.height;			reflectionBmp.x = 0;			reflectionBmp.rotation = 180;			reflectionBmp.scaleX = -1;			reflectionBmp.alpha = reflectionStrength; 			reflectionMask = new Sprite( );			var fillType : String = GradientType.LINEAR;			var colors : Array = [ 0xFFFFFF, 0x0000FF ];			var alphas : Array = [ 100, 0 ];			var ratios : Array = [ 0, reflectionHeight ];			var matrix : Matrix = new Matrix( );			var spreadMethod : String = SpreadMethod.PAD; 			matrix.createGradientBox( reflectSource.height * .9, reflectSource.width, 0, 0, 0 );			reflectionMask.graphics.beginGradientFill( fillType, colors, alphas, ratios, matrix, spreadMethod );			reflectionMask.graphics.drawRect( 0, 0, reflectSource.height, reflectSource.width ); 			reflectionMask.y = 0;			reflectionMask.x = reflectionBmp.width;			reflectionMask.rotation = 90; 			reflectionBmp.cacheAsBitmap = true;			reflectionMask.cacheAsBitmap = true;			reflectionBmp.mask = reflectionMask;		}		/**		 * @private		 */		protected function attachItems() : void {			this.addChild( reflectionHolder );			reflectionHolder.addChild( reflectionBmp );			reflectionHolder.addChild( reflectionMask );		}		/**		 * @private		 */		protected function positionElements() : void {			this.x = reflectSource.x;			this.y = reflectSource.y + reflectSource.height + reflectionOffsetY;		}		/**		 * @inheritDoc		 */		override public function destroy() : void {			reflectionHolder.removeChild( reflectionMask );			reflectionHolder.removeChild( reflectionBmp );			removeChild( reflectionHolder );			super.destroy( );		}			}}