/** * sekati.ui.components.calendar.AbstractCalendar * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.ui.components.calendar {	import sekati.utils.TypeEnforcer;		import sekati.display.CoreSprite;		/**	 * XXX - WARNING: EXPERIMENTAL: DO NOT IMPLEMENT	 * AbstractCalendar provides some basic abstracted calendar logic for UI classes such as 	 * days of each month (factoring leap years), first day of week in month, surrounding months, etc. 	 */	public class AbstractCalendar extends CoreSprite {		// helper constants		public static const millisecondsPerMinute : int = 1000 * 60;		public static const millisecondsPerHour : int = 1000 * 60 * 60;		public static const millisecondsPerDay : int = 1000 * 60 * 60 * 24;				// date settings		public var today : Date;		public var year : int;		public var month : int;		public var day : int;		// name settings (xml)		public static var monthsOfYear : Array = [ 'January','Febuary','March','April','May','June','July','August','September','October','November','December' ];		public static var daysOfWeek : Array = [ 'Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday' ];		public static var shortDaysOfWeek : Array = [ 'S','M','T','W','T','F','S' ];		/**		 * AbstractCalendar Constructor		 */		public function AbstractCalendar(date : Date = null) {			TypeEnforcer.enforceAbstract(this, AbstractCalendar);			// define our calendar dates			today = (date) ? date : new Date( );			year = today.getFullYear( );			month = today.getMonth( );			day = today.getDate( );					}		/**		 * Return the number of days in this month/year (factoring in leap years).		 */		public function getDaysInMonth(year : Number = NaN, month : Number = NaN) : int {			// return ((currentDate.getFullYear( ) % 4 == 0 && currentDate.getFullYear( ) % 100 != 0) || currentDate.getFullYear( ) % 400 == 0 && currentDate.getMonth( ) == 1 ? 29 : daysOfMonths[currentDate.getMonth( )]);			if (isNaN( year )) year = this.year;			if (isNaN( month )) month = this.month;			var monthDays : Array;			if (((year % 4 == 0) && !(year % 100 == 0)) || (year % 400 == 0)) {				monthDays = [ 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];			} else {				monthDays = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];			}			return monthDays[month];		}		/**		 * Return the position of the first day of the month on the calendar (mon,tue,wed,etc). 		 */		public function getFirstDayInMonth(year : Number = NaN, month : Number = NaN) : int {			if (isNaN( year )) year = this.year;			if (isNaN( month )) month = this.month;						var tempDate : Date = new Date( year, month, 1 );			return tempDate.getDay( );		}		/**		 * Return a surrounding month (previous/next to this calendar) in Date object format.		 */		public function getSurroundingMonth(isNextMonth : Boolean = true) : Date {			var m : int = month;			var y : int = year;			// next month			if(isNextMonth) {				if(m == 11) {					y++;					m = 0;					} else {					m++;					}			// previous month			} else {				if(m == 0) {					y--;					m = 11;				} else {					m--;				}			}			return new Date( y, m );		}		/**		 * Advance the AbstractCalendar Month forward or backward.		 */		public function advanceMonth(direction : int) : void {			if ((month == 11) && (direction == 1)) {				year++;				month = 0;			} else if ((month == 0) && (direction == -1)) {				year--;				month = 11;			}                else {				month = month + direction;			}       		}		/**		 * Get the name of a month (January, Febuary, etc).		 */		public function getMonthName(month : Number = NaN) : String {			month = (isNaN( month )) ? month : this.month;			return monthsOfYear[month];		}				/**		 * Get the name of a day (Monday, Tuesday, etc).		 */		public function getDayName(year : Number = NaN, month : Number = NaN, day : Number = NaN) : String {			if (isNaN( year )) year = this.year;			if (isNaN( month )) month = this.month;						if (isNaN( day )) day : this.day;			var tempDate : Date = new Date( year, month, day );			return daysOfWeek[tempDate.getDay( )];					}									}}