/** * com.mac.engine.EngineUtil * @version 1.2.4 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package com.coresite.engine {	import flash.external.ExternalInterface;		/**	 * The EngineUtil Singleton provides Engine::Product* classes with parsing helper methods & utilities.	 */	final public class EngineUtil {		protected static var _instance : EngineUtil;			/**		 * EngineUtil Singleton Constructor		 * @param $ SingletonEnforcer - internal to the AS file; the param prevents external instantiation without error.		 */		public function EngineUtil( $ : SingletonEnforcer = null) {			if (!$) {				throw new ArgumentError( "EngineUtil is a Singleton and may only be accessed via its accessor methods: 'getInstance()' or '$'." );				}		}		/**		 * Singleton Accessor		 * @return EngineUtil		 */		public static function getInstance() : EngineUtil {			if( _instance == null ) _instance = new EngineUtil( new SingletonEnforcer( ) );			return _instance;		}		/**		 * Shorthand singleton accessor getter		 * @return EngineUtil		 */		public static function get $() : EngineUtil {			return EngineUtil.getInstance( );			}		public function sanitizeStr(str : String = null) : String {			if (str == null) {				return null;			}			str = str.replace( /null/g, null );			str = str.replace( /,,/g, "" );			str = str.replace( /&#183;/g, "·" );			str = str.replace( /&#183/g, "·" );			// necessary for malformed codes that are missing semicolons			str = str.replace( /&nbsp;/g, " " );			str = str.replace( /&nbsp/g, " " );			str = str.replace( /&#160;/g, " " );			str = str.replace( /&#160/g, " " );			str = str.replace( /&#8211;/g, "–" );			str = str.replace( /&#8211/g, "–" );			str = str.replace( /&#8217;/g, "’" );			str = str.replace( /&#8217/g, "’" );			str = str.replace( /&#8220;/g, "“" );			str = str.replace( /&#8220/g, "“" );			str = str.replace( /&#8221;/g, "”" );			str = str.replace( /&#8221/g, "”" );			return str;		}		/**		 * Format a price int to localized string.		 * @param value 		of the Number price.		 * @param symbol 		the currency symbol to localize the formatting to.		 * @param hasSymbol 	whether or not to display the currency symbol in the formatted string.		 * @example <listing version="3.0">		 * trace( connector.EngineUtil['formatCurrency']( 10 ) ); 				// returns: $10.00		 * trace( connector.EngineUtil['formatCurrency']( 10.5 ) ); 			// returns: $10.50		 * trace( connector.EngineUtil['formatCurrency']( 10, '$', false ) ); 	// returns: 10.00		 * trace( connector.EngineUtil['formatCurrency']( 10, '€' ) ); 			// returns: 10.00€		 * trace( connector.EngineUtil['formatCurrency']( 10, '£' ) ); 			// returns: 10.00£		 * trace( connector.EngineUtil['formatCurrency']( 10, '¥' ) ); 			// returns: 10¥		 * trace( connector.EngineUtil['formatCurrency']( 10, '₩' ) ); 			// returns: 10₩		 * </listing>		 * 		 * @see  http://en.wikipedia.org/wiki/United_States_dollar		 * @see http://en.wikipedia.org/wiki/Euro		 * @see http://en.wikipedia.org/wiki/Pound_sterling		 * @see http://en.wikipedia.org/wiki/Japanese_yen		 * @see http://en.wikipedia.org/wiki/South_Korean_won		 */		public function formatCurrency(value : Number, symbol : String = '$', hasSymbol : Boolean = true) : String {			var str : String;			var sym : String = (!hasSymbol) ? '' : symbol;			switch (symbol) {				case '$':					str = sym + value.toFixed( 2 ); 					break;				case '€':				case '£':					str = value.toFixed( 2 ) + sym; 					break;				case '¥':				case '₩':					str = value.toFixed( 0 ) + sym;					break;				default:					throw new Error( 'EngineUtil.formatCurrency Error: Unknown or invalid currency symbol: ' + symbol );					break;			}			return str;		}		/**		 * Add a <code>ProductSku</code> to the shopping cart.		 * @example <listing version="3.0">		 * 	EngineUtil.$.addToCart( "CAT643PROD1792SKU5936" );		 * </listing>		 */		public function addToCart(sku : String) : * {			var paramObj : Array = [ { actions:[ { action:"add", cart:"checkout", type:"sku", path:sku } ]} ];			var result : * = EngineUtil.$.externalCall( 'alterCart', paramObj );			trace( "@@@ SAVING TO CART: " + sku + " => " + result );			return result;		}		/**		 * Add a <code>ProductSku</code> to the favourite cart.		 * @example <listing version="3.0">		 * 	EngineUtil.$.addToFavourite( "CAT643PROD1792SKU5936" );		 * </listing>		 */		public function addToFavourite(sku : String) : * {			var paramObj : Array = [ { actions:[ { action:"add", cart:"favorites", type:"sku", path:sku } ]} ];			var result : * = EngineUtil.$.externalCall( 'alterCart', paramObj );			trace( "@@@ SAVING AS FAVOURITE: " + sku + " => " + result );			return result;		}				/**		 * Make a call to the MAC javascript JSON wrapper.		 */		protected function externalCall(method : String, param : Array) : * {			if(ExternalInterface.available) {				try {					//ExternalInterface.marshallExceptions = true;					var result : Object = ExternalInterface.call( "generic.flash.Api.jsCall", method, param );				} catch (e : Error) {					trace( "### Error: Engine::EngineUtil.externalCall(): " + e.message );				} catch (se : SecurityError) {					trace( "### SecurityError: Engine::EngineUtil.externalCall(): " + se.message );				}				return result;			} else {				trace( "### Engine::EngineUtil.externalCall(): ExternalInterface is not available!" );				}		}	}}/** * Internal class is accessible onlsy to this AS file * and is used as a constructor param to enforce * proper Singleton behavior. */internal class SingletonEnforcer {}		