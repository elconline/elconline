package com.coresite.engine {	import com.coresite.events.JsonEvent;	import flash.events.EventDispatcher;		import flash.events.IOErrorEvent;		import flash.events.Event;		import com.doubleprime.generic.GenericJsonRpc;			/**	 * @author nmouzannar	 */	public class JsonConnection extends EventDispatcher{				private static var _instance:JsonConnection = null;		private var g:GenericJsonRpc;		private var categoryArr:Array;		private var category_fieldsArr:Array;		private var productArr:Array;		private var product_fieldsArr:Array;		private var skuArr:Array;		private var sku_fieldsArr:Array;		private var myArray:Array;		private var count:uint = 0;		private var _ret_data: Object;				public function JsonConnection(){}					public static function getInstance():JsonConnection {			if (JsonConnection._instance == null) {				JsonConnection._instance = new JsonConnection();			}			return JsonConnection._instance;		}		// ------------------------------------		// ACCESSORS		// ------------------------------------				public function get ret_data():Object { return _ret_data; };		public function set ret_data(value:Object):void { _ret_data = value; };				// ---------------------------------------		//  CREATE		// ---------------------------------------				public function buildAndSend(data:Array, jsonUrl):void{			count = 0;			buildRequest (data);			sendRequest (jsonUrl);		}		public function buildAndSendbyCatId(catId:String, jsonUrl):void{			count = 0;			buildRequestByCatId (catId);			sendRequest (jsonUrl);		}				private function buildRequest(data:Array):void{								productArr = new Array();			product_fieldsArr = new Array();			skuArr = new Array();			sku_fieldsArr = new Array();			myArray = new Array();						productArr = data;			product_fieldsArr = ["PRODUCT_ID", "PRODUCT_NAME", "url","SMALL_IMAGE", "sku"]			sku_fieldsArr = ["SKU_ID", "PRODUCT_ID", "SHADENAME", "shopping_id","INVENTORY_STATUS", "PRICE", "hex_value_string", ]; 						// myArray parameter 			myArray = [{product:productArr,product_fields:product_fieldsArr,sku_fields:sku_fieldsArr}];		}				private function buildRequestByCatId(categoryId:String):void{				categoryArr = new Array();			category_fieldsArr = new Array();			productArr = new Array();			product_fieldsArr = new Array();			skuArr = new Array();			sku_fieldsArr = new Array();			myArray = new Array();						categoryArr = [categoryId];			category_fieldsArr =[ "category_id", "category_name", "image_name", "product"];			productArr = [];			product_fieldsArr = ["PRODUCT_ID", "PRODUCT_NAME", "url","SMALL_IMAGE", "sku"]			sku_fieldsArr = ["SKU_ID", "PRODUCT_ID", "SHADENAME", "shopping_id","INVENTORY_STATUS", "PRICE", "hex_value_string", ]; 			// myArray parameter 			myArray = [{category:[ categoryId ],category_fields: category_fieldsArr, product:productArr,product_fields:product_fieldsArr,sku_fields:sku_fieldsArr}];		}		// ---------------------------------------		//  METHODS		// ---------------------------------------						private function sendRequest(jsonUrl:String):void{	//Connect to the GenericJsonRpc.as, use doMethod and setup EventListeners			g = new GenericJsonRpc();			g.doMethod("prodcat.byid", myArray,jsonUrl);	//NOTE: need to change the url before posting on dev - make it root relative /jsonrpc.json			g.addEventListener(GenericJsonRpc.COMPLETE, complete);			g.addEventListener(GenericJsonRpc.OPENHANDLER, openHandler);			g.addEventListener(GenericJsonRpc.IOERROR, ioError);			g.addEventListener(GenericJsonRpc.TIMERTICK, timerTick);			g.addEventListener(GenericJsonRpc.TIMERUP, timerUp);		}				// ---------------------------------------		//  EVENTS		// ---------------------------------------		private function complete(event:Event):void {			ret_data = new Object();			ret_data = event.target.getResponse();				dispatchEvent(new JsonEvent(JsonEvent.ON_COMPLETE,true,false,ret_data));		}				private function openHandler(event:Event):void {			trace ('event.type = '+ event.type);;		}				private function ioError(event:IOErrorEvent):void {			trace ('IOError Connecting to Json');		}				private function timerTick(event:Event):void {			count++;			trace("Tick"+count);		}				private function timerUp(event:Event):void {			trace("Timers Up!"+event.type +" "+event);		}	}}