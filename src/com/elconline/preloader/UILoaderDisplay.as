//============================================================================================// 									UILoaderDisplay CLASS//============================================================================================/*/*		THIS VERSION OF THE "UILoaderDisplay" CLASS HAS BEEN BUILT TO WORK WITH BULK LOADER*/package com.coresite.preloader {	//Flash Classes	import com.coresite.preloader.ProgressBar;	import gs.TweenLite;	import gs.easing.Sine;			import flash.display.MovieClip;	import flash.display.Sprite;	import flash.text.TextField;	import flash.events.*;		// Bulk Loader    import br.com.stimuli.loading.BulkProgressEvent;	    public class UILoaderDisplay extends Sprite {				// Visual Assets		private var progressBar_mc:MovieClip;		private var progress_txt:TextField;		private var owner:String;				//----------------------------------------------------------------------------------		// INIT		//----------------------------------------------------------------------------------				function UILoaderDisplay(_owner:*):void{			this.alpha = 0;			owner = _owner;			progressBar_mc = new ProgressBar();			progressBar_mc.x = 2.5;			progressBar_mc.y = 2.5;						addChild(progressBar_mc);			//getChildByName("progressBar") as MovieClip;			//		}				//--------------------------------------------------------------------------------		// intialzes loader bar				public function init(delay:Number = 1.25):void		{				// This is a display/view and should only contain view logic (building and displaying)						TweenLite.killTweensOf(this);			progressBar_mc.scaleX = 0;			this.alpha = 0;			TweenLite.to(this , 0.5 , { alpha:1, ease:Sine.easeIn, overwrite:false, delay:delay } );					}						//--------------------------------------------------------------------------------		// intialzes loader bar				public function resetAssets():void		{				// This is a display/view and should only contain view logic (building and displaying)						TweenLite.killTweensOf(this);			progressBar_mc.scaleX = 0;			this.visible = false;		}				public function fadeOutPreloader():void {			TweenLite.to(this , .25 , { alpha:0, ease:Sine.easeIn, overwrite:false, onComplete:resetAssets } );		}				//--------------------------------------------------------------------------------		// center loader bar to the stage (MUST BE ADDED TO DISPLY TO WORK)				public function centerUILoader():void		{				var xcenter:Number = (stage.stageWidth / 2) - ( this.width / 2);			var ycenter:Number = (stage.stageHeight / 2) - ( this.height / 2);			this.x = xcenter;			this.y = ycenter;		}				//--------------------------------------------------------------------------------		// Setup MCL & Assign Listener				private function initLoad():void		{		}				//--------------------------------------------------------------------------------		// onLoadStart | intializes progress bar | easing equation in onEnterFrame used as light weight tween				public function onLoadStart():void		{						//progressBar_mc.alpha = 1;			/*			// Setup Progress Bar			progressBar_mc.dest = 0;			progressBar_mc.onEnterFrame = function()			{				scaleX += (this.dest - this._xscale) * .5;			}			*/		}					//--------------------------------------------------------------------------------		// onLoadProgress | Updates progress bar | progressBar_mc.dest is a easing target						public function onLoadProgress(evt:BulkProgressEvent):void {					if (owner == evt.currentTarget.name) {				var bytesLoaded:Number = evt.bytesLoaded;				var bytesTotal:Number = evt.bytesTotal;				var percent:Number = bytesLoaded / bytesTotal;				progressBar_mc.scaleX = percent;				//trace('FROM LOADER DIPSLAY IF OWNER CORRECT  == ' + percent); 			}		}		public function onLoadProgressByWeight(evt:BulkProgressEvent):void {					if (owner == evt.currentTarget.name) {				progressBar_mc.scaleX = evt.weightPercent;			}		}					//--------------------------------------------------------------------------------		// Load Completed | init callBack | Fade preloader out						public function onLoadInit(_targetClip:MovieClip):void 		{			/*			// Keep that clip hidden until its fully loaded			_targetClip._alpha = 0;						callBack.apply(owner);			removePreloader();			*/		}						//--------------------------------------------------------------------------------		// Remove | Assets,Listeners,Variables						public function removePreloader():void		{			//removeChild(this);						/*			progressBar_mc.onEnterFrame = undefined;			mLoader.removeListener(this);			_visible = false;			delete mLoader;			this.removeMovieClip();			*/		}				//--------------------------------------------------------------------------------		// LOAD ERROR				public function onLoadError(_targetClip:MovieClip, _errorCode:String) {			progress_txt.text = "file not found";		}				//--------------------------------------------------------------------------------				public function getOwner():String{			return owner;		}				public function setOwner(_owner):void {			owner = _owner;		}	    }}