package com.coresite.utils {	import flash.geom.ColorTransform;	
	import flash.display.Shape;		import flash.display.SpreadMethod;		import flash.geom.Matrix;		import flash.display.GradientType;	
	
	import fl.motion.Color;			import flash.display.DisplayObject;		import flash.display.Sprite;		/**	 * @author nmouzannar	 */	public class Draw {				public static function createHorizontalLine(thickness:Number,color:int,alpha:Number,lineWidth:Number):Sprite{					var sprite:Sprite = new Sprite();		  	sprite.graphics.moveTo(0,0);			sprite.graphics.lineStyle(thickness,color,alpha);			sprite.graphics.lineTo(lineWidth, 0);			return sprite;		}				public static function createVerticalLine(thickness:Number,color:int,alpha:Number,lineHeight:Number):Sprite{					var sprite:Sprite = new Sprite();		  	sprite.graphics.moveTo(0,0);			sprite.graphics.lineStyle(thickness,color,alpha);			sprite.graphics.lineTo(0, lineHeight);			return sprite;		}				public static function createBox ( w:Number, h:Number, color:Number=0xFFFFFF,alpha:Number=1 ):Sprite{			var sprite:Sprite = new Sprite();			sprite.graphics.beginFill(color,alpha);			sprite.graphics.drawRect(0, 0 , w, h);			sprite.graphics.endFill();			return sprite;		}		public static function createBorder(w:Number,h:Number, thickness:Number=1, color:uint=0,alpha:Number=1,pixelHinting:Boolean = false,scaleMode:String = "normal",caps:String = null,joints:String = null, miterLimit:Number = 3): Sprite {			var sprite:Sprite = new Sprite();			sprite.graphics.lineStyle(thickness,color,alpha,pixelHinting,caps,scaleMode,joints,miterLimit);			sprite.graphics.drawRect(0, 0 , w, h);			sprite.graphics.endFill();			return sprite;		}		public static function createGradientBox(w:Number, h:Number, topColor:uint,bottomColor:uint):Sprite{				var sprite:Sprite = new Sprite();		  	var fillType:String = GradientType.LINEAR;  			var colors:Array = [topColor, bottomColor];  			var alphas:Array = [1, 1];  			var ratios:Array = [0x00, 0xFF];  			var matr:Matrix = new Matrix();  			matr.createGradientBox(w, 20, Math.PI/2, 0, 0);  			var spreadMethod:String = SpreadMethod.PAD;  			sprite.graphics.beginGradientFill(fillType, colors, alphas, ratios, matr, spreadMethod);    			sprite.graphics.drawRect(0,0,w,h);			return sprite;		}			public static function createMask(posx:int,posy:int,w:Number,h:Number): Sprite {			var sprite:Sprite = new Sprite();			sprite.graphics.beginFill(0x33FF00);			sprite.graphics.lineStyle(1,0xFF0000,1);			sprite.graphics.drawRect(0, 0 , w, h); //279 x 3 + 26 x2 + 33			sprite.graphics.endFill();			sprite.x = posx;			sprite.y = posy;			return sprite;		}				public static function tintColor(clip:DisplayObject, colorNum:Number, alphaSet:Number):void {			var cTint:Color = new Color();			cTint.setTint(colorNum, alphaSet);			clip.transform.colorTransform = cTint;		}				public static function ChangeColorTo(displayObject:DisplayObject, color:uint):void{			var colorInfo:ColorTransform = displayObject.transform.colorTransform;		    colorInfo.color = color;		    displayObject.transform.colorTransform = colorInfo;		}						public static function roundRect(color:uint,posX:Number,posY:Number,width:Number,height:Number,cornerRadius:uint):Sprite {            var sprite:Sprite = new Sprite();            sprite.graphics.beginFill(color);            sprite.graphics.drawRoundRect(posX, posY, width, height, cornerRadius,cornerRadius);            sprite.graphics.endFill();            return sprite;        }                public static function doDrawCircle(size:Number,bgColor:uint,borderSize:Number,borderColor:uint):Shape {            var child:Shape = new Shape();            var halfSize:uint = Math.round(size / 2);            child.graphics.beginFill(bgColor);            child.graphics.lineStyle(borderSize, borderColor);            child.graphics.drawCircle(halfSize, halfSize, halfSize);            child.graphics.endFill();            return child;        }        	}}